<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  -->
<xs:schema targetNamespace="http://plc4x.apache.org/s7"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
           xmlns:plc4x="http://plc4x.apache.org/plc4x"
           xmlns:s7="http://plc4x.apache.org/s7"
           xmlns:fn="http://www.w3.org/2005/xpath-functions">

    <xs:import namespace="http://plc4x.apache.org/plc4x"/>

    <xs:annotation>
        <xs:appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:defineVariable name="messageType" type="xs:string"/>
            <dfdl:defineFormat name="s7FullFormat">
                <dfdl:format representation="binary"
                             binaryNumberRep="binary"
                             byteOrder="bigEndian"
                             lengthKind="implicit" lengthUnits="bytes" length="0"
                             binaryBooleanTrueRep="1"
                             binaryBooleanFalseRep="0"
                             occursCountKind="implicit"
                             textOutputMinLength="0"
                             alignment="1" alignmentUnits="bits"
                             leadingSkip="0" trailingSkip="0"
                             textPadKind="none" ignoreCase="no"
                             textBidi="no" floating="no"
                             encoding="utf-8" truncateSpecifiedLengthString="no"
                             initiator="" terminator=""
                             sequenceKind="ordered" separator=""
                             escapeSchemeRef="" initiatedContent="no"
                             encodingErrorPolicy="replace"/>
            </dfdl:defineFormat>
            <dfdl:format ref="s7:s7FullFormat"/>
        </xs:appinfo>
    </xs:annotation>

    <!--

        TPKT - Iso-On-TCP

    -->

    <xs:element name="TpktMessage" type="s7:TpktMessage"/>

    <xs:complexType name="TpktMessage">
        <xs:sequence>
            <!-- TPKT Magic Byte always 0x03 -->
            <xs:element name="magicByte" type="plc4x:uint8" fixed="3">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/dfdl">
                        <plc4x:noProperty/>
                    </xs:appinfo>
                    <xs:appinfo source="http://www.ogf.org/dfdl/">
                        <dfdl:assert message="Magic number was not 0x03."
                                     test="{. eq 3}"/>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="reserved" type="plc4x:uint8">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/dfdl">
                        <plc4x:noProperty/>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="length" type="plc4x:uint16"/>
            <xs:element name="userData" type="s7:CotpMessage"/>
        </xs:sequence>
    </xs:complexType>

    <!--

        ISO 8073/X.224 - ISO-TP - COTP - Connection-Oriented Transport Protocol Messages

    -->

    <xs:simpleType name="CotpTpduType">
        <xs:restriction base="plc4x:uint8">
            <xs:enumeration value="224">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>ConnectionRequest</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="208">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>ConnectionResponse</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="128">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>DisconnectRequest</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="192">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>DisconnectResponse</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="112">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>Error</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="240">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>Data</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="CotpParameterType">
        <xs:restriction base="plc4x:uint8">
            <xs:enumeration value="192">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>TpduSize</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="193">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>CallingTsap</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="194">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>CalledTsap</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="195">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>Checksum</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
            <xs:enumeration value="224">
                <xs:annotation>
                    <xs:appinfo source="http://plc4x.apache.org/plc4x">
                        <plc4x:enumName>DisconnectAdditionalInformation</plc4x:enumName>
                    </xs:appinfo>
                </xs:annotation>
            </xs:enumeration>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="CotpMessage">
        <xs:sequence>
            <!-- Length of the COTP header data -->
            <xs:element name="headerLength" type="plc4x:uint8"/>
            <xs:element name="type" type="s7:CotpTpduType"/>
            <xs:choice dfdl:choiceDispatchKey="{xs:string(type)}">
                <xs:element dfdl:choiceBranchKey="224" name="cotpTpduConnectionRequest"
                            type="s7:CotpTpduConnectionRequest"/>
                <xs:element dfdl:choiceBranchKey="208" name="cotpTpduConnectionResponse"
                            type="s7:CotpTpduConnectionResponse"/>
                <xs:element dfdl:choiceBranchKey="128" name="cotpTpduDisconnectRequest"
                            type="s7:CotpTpduDisconnectRequest"/>
                <xs:element dfdl:choiceBranchKey="192" name="cotpTpduDisconnectResponse"
                            type="s7:CotpTpduDisconnectResponse"/>
                <xs:element dfdl:choiceBranchKey="112" name="cotpTpduError" type="s7:CotpTpduError"/>
                <xs:element dfdl:choiceBranchKey="240" name="cotpTpduData" type="s7:CotpTpduData"/>
            </xs:choice>
            <xs:element name="userData" type="s7:S7Message" minOccurs="0"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if((../../length - (../headerLength + 5)) gt 0) then 1 else 0}"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpTpduConnectionRequest">
        <xs:sequence>
            <xs:element name="destinationReference" type="plc4x:uint16"/>
            <xs:element name="sourceReference" type="plc4x:uint16"/>
            <xs:element name="protocolClass" type="plc4x:uint8"/>
            <xs:element name="parameters" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../../headerLength - 6}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../../headerLength gt 6) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="parameter" type="s7:CotpParameter" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpTpduConnectionResponse">
        <xs:sequence>
            <xs:element name="destinationReference" type="plc4x:uint16"/>
            <xs:element name="sourceReference" type="plc4x:uint16"/>
            <xs:element name="protocolClass" type="plc4x:uint8"/>
            <xs:element name="parameters" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../../headerLength - 6}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../../headerLength gt 6) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="parameter" type="s7:CotpParameter" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpTpduDisconnectRequest">
        <xs:sequence>
            <xs:element name="destinationReference" type="plc4x:uint16"/>
            <xs:element name="sourceReference" type="plc4x:uint16"/>
            <xs:element name="disconnectReason" type="plc4x:uint8"/>
            <xs:element name="parameters" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../../headerLength - 6}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../../headerLength gt 6) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="parameter" type="s7:CotpParameter" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpTpduDisconnectResponse">
        <xs:sequence>
            <xs:element name="destinationReference" type="plc4x:uint16"/>
            <xs:element name="sourceReference" type="plc4x:uint16"/>
            <xs:element name="parameters" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../../headerLength - 5}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../../headerLength gt 5) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="parameter" type="s7:CotpParameter" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpTpduError">
        <xs:sequence>
            <xs:element name="destinationReference" type="plc4x:uint16"/>
            <xs:element name="rejectCause" type="plc4x:uint8"/>
            <xs:element name="parameters" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../../headerLength - 4}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../../headerLength gt 4) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="parameter" type="s7:CotpParameter" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpTpduData">
        <xs:sequence>
            <xs:element name="endOfTransmission" type="plc4x:bit"/>
            <xs:element name="tpduRef" type="plc4x:uintN" dfdl:length="7"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpParameter">
        <xs:sequence>
            <xs:element name="type" type="s7:CotpParameterType"/>
            <xs:element name="parameterLength" type="plc4x:uint8"/>
            <xs:choice dfdl:choiceDispatchKey="{xs:string(type)}">
                <xs:element dfdl:choiceBranchKey="192" name="cotpParameterTpduSize" type="s7:CotpParameterTpduSize"/>
                <xs:element dfdl:choiceBranchKey="193" name="cotpParameterCallingTsap" type="s7:CotpParameterCallingTsap"/>
                <xs:element dfdl:choiceBranchKey="194" name="cotpParameterCalledTsap" type="s7:CotpParameterCalledTsap"/>
                <xs:element dfdl:choiceBranchKey="195" name="cotpParameterChecksum" type="s7:CotpParameterChecksum"/>
                <xs:element dfdl:choiceBranchKey="224" name="cotpParameterDisconnectAdditionalInformation"
                            type="s7:CotpParameterDisconnectAdditionalInformation"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpParameterTpduSize">
        <xs:sequence>
            <xs:element name="tpduSize" type="plc4x:uint8"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpParameterCallingTsap">
        <xs:sequence>
            <xs:element name="tsapId" type="plc4x:uint16"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpParameterCalledTsap">
        <xs:sequence>
            <xs:element name="tsapId" type="plc4x:uint16"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpParameterChecksum">
        <xs:sequence>
            <xs:element name="checksum" type="plc4x:uint8"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CotpParameterDisconnectAdditionalInformation">
        <xs:sequence>
            <xs:element name="data" type="plc4x:byteN" dfdl:length="{../../parameterLength}"/>
        </xs:sequence>
    </xs:complexType>

    <!--

        S7 Types

    -->

    <xs:complexType name="S7Message">
        <xs:sequence>
            <!-- S7 Magic Byte always 0x32 -->
            <xs:element name="magicByte" type="plc4x:uint8">
                <xs:annotation>
                    <xs:appinfo source="http://www.ogf.org/dfdl/">
                        <dfdl:assert message="Magic number was not 0x32."
                                     test="{. eq 50}"/>
                    </xs:appinfo>
                </xs:annotation>
            </xs:element>
            <xs:element name="type" type="plc4x:uint8"/>
            <!--
                Unfortunately the response for a CPU Functions request follows the rules of a
                response, however has the header structure of a request
                (no error code or error class). As mapping to the same type is not allowed,
                we map to strings and use that as choice-key.
            -->
            <xs:choice dfdl:choiceDispatchKey="{xs:string(type)}">
                <xs:element dfdl:choiceBranchKey="1" name="s7RequestMessage" type="s7:S7RequestMessage"/>
                <xs:element dfdl:choiceBranchKey="3" name="s7ResponseMessage" type="s7:S7ResponseMessage"/>
                <xs:element dfdl:choiceBranchKey="7" name="s7UserDataMessage" type="s7:S7UserDataMessage"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7RequestMessage">
        <xs:sequence>
            <!-- Reserved value always 0x0000 -->
            <xs:element name="reserved" type="plc4x:uint16" fixed="0"/>
            <xs:element name="tpduReference" type="plc4x:uint16"/>
            <xs:element name="parametersLength" type="plc4x:uint16"/>
            <xs:element name="payloadsLength" type="plc4x:uint16"/>
            <xs:element name="parameters" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../parametersLength}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../parametersLength gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="parameter" type="s7:S7RequestParameter" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <!--
               As we might be outputting an empty payload block for a parameter that might not have a payload,
               we have to output this element if the parameters are not empty. The case that the payloads are
               not empty but the parameters are can't happen during normal operation.
           -->
            <xs:element name="payloads" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../payloadsLength}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../parametersLength gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <!--
                            For every parameter we'll be outputting a payload block, even if this might be empty.
                            This is required in order to find the matching parameter for every payload we might
                            be having. We need to match these as otherwise we couldn't determine the type of a
                            payload as this has no type information and we need to be able to access the number
                            of items for a read/write request in order to process the correct number of items in
                            the payload.
                        -->
                        <xs:element name="payload" type="s7:S7Payload" maxOccurs="unbounded"
                                    dfdl:occursCountKind="expression"
                                    dfdl:occursCount="{fn:count(../../parameters[1]/parameter)}"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7ResponseMessage">
        <xs:sequence>
            <!-- Reserved value always 0x0000 -->
            <xs:element name="reserved" type="plc4x:uint16" fixed="0"/>
            <xs:element name="tpduReference" type="plc4x:uint16"/>
            <xs:element name="parametersLength" type="plc4x:uint16"/>
            <xs:element name="payloadsLength" type="plc4x:uint16"/>
            <!-- UserData (type 7) responses don't have the error class and code -->
            <xs:element name="errorClass" type="plc4x:uint8" minOccurs="0"
                        dfdl:occursCountKind="expression" dfdl:occursCount="{if(../../type eq 3) then 1 else 0}"/>
            <xs:element name="errorCode" type="plc4x:uint8" minOccurs="0"
                        dfdl:occursCountKind="expression" dfdl:occursCount="{if(../../type eq 3) then 1 else 0}"/>
            <xs:element name="parameters" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../parametersLength}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../parametersLength gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="parameter" type="s7:S7ResponseParameter" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <!--
                As we might be outputting an empty payload block for a parameter that might not have a payload,
                we have to output this element if the parameters are not empty. The case that the payloads are
                not empty but the parameters are can't happen during normal operation.
            -->
            <xs:element name="payloads" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../payloadsLength}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../parametersLength gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <!--
                            For every parameter we'll be outputting a payload block, even if this might be empty.
                            This is required in order to find the matching parameter for every payload we might
                            be having. We need to match these as otherwise we couldn't determin the type of a
                            payload as this has no type information and we need to be able to access the number
                            of items for a read/write request in order to process the correct number of items in
                            the payload.
                        -->
                        <xs:element name="payload" type="s7:S7Payload" maxOccurs="unbounded"
                                    dfdl:occursCountKind="expression"
                                    dfdl:occursCount="{fn:count(../../parameters[1]/parameter)}"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType name="S7UserDataMessage">
        <xs:sequence>
            <!-- Reserved value always 0x0000 -->
            <xs:element name="reserved" type="plc4x:uint16" fixed="0"/>
            <xs:element name="tpduReference" type="plc4x:uint16"/>
            <xs:element name="parametersLength" type="plc4x:uint16"/>
            <xs:element name="payloadsLength" type="plc4x:uint16"/>
            <xs:element name="parameters" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../parametersLength}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../parametersLength gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="parameter" type="s7:S7GeneralParameter" maxOccurs="unbounded"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
            <!--
               As we might be outputting an empty payload block for a parameter that might not have a payload,
               we have to output this element if the parameters are not empty. The case that the payloads are
               not empty but the parameters are can't happen during normal operation.
           -->
            <xs:element name="payloads" minOccurs="0"
                        dfdl:lengthKind="explicit" dfdl:lengthUnits="bytes" dfdl:length="{../payloadsLength}"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../parametersLength gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <!--
                            For every parameter we'll be outputting a payload block, even if this might be empty.
                            This is required in order to find the matching parameter for every payload we might
                            be having. We need to match these as otherwise we couldn't determine the type of a
                            payload as this has no type information and we need to be able to access the number
                            of items for a read/write request in order to process the correct number of items in
                            the payload.
                        -->
                        <xs:element name="payload" type="s7:S7Payload" maxOccurs="unbounded"
                                    dfdl:occursCountKind="expression"
                                    dfdl:occursCount="{fn:count(../../parameters[1]/parameter)}"/>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <!--

        Parameters.

    -->

    <xs:complexType name="S7GeneralParameter">
        <xs:sequence>
            <xs:element name="type" type="plc4x:uint8"/>
            <xs:choice dfdl:choiceDispatchKey="{xs:string(type)}">
                <xs:element dfdl:choiceBranchKey="240" name="s7GeneralParameterSetupCommunication"
                            type="s7:S7GeneralParameterSetupCommunication"/>
                <xs:element dfdl:choiceBranchKey="0" name="s7UserDataParameterCPUService"
                            type="s7:S7UserDataParameterCPUService"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7RequestParameter">
        <xs:sequence>
            <xs:element name="type" type="plc4x:uint8"/>
            <xs:choice dfdl:choiceDispatchKey="{xs:string(type)}">
                <xs:element dfdl:choiceBranchKey="240" name="s7GeneralParameterSetupCommunication"
                            type="s7:S7GeneralParameterSetupCommunication"/>
                <xs:element dfdl:choiceBranchKey="4" name="s7RequestParameterReadVar"
                            type="s7:S7RequestParameterReadVar"/>
                <xs:element dfdl:choiceBranchKey="5" name="s7RequestParameterWriteVar"
                            type="s7:S7RequestParameterWriteVar"/>
                <xs:element dfdl:choiceBranchKey="0" name="s7UserDataParameterCPUService"
                            type="s7:S7UserDataParameterCPUService"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7ResponseParameter">
        <xs:sequence>
            <xs:element name="type" type="plc4x:uint8"/>
            <xs:choice dfdl:choiceDispatchKey="{xs:string(type)}">
                <xs:element dfdl:choiceBranchKey="240" name="s7GeneralParameterSetupCommunication"
                            type="s7:S7GeneralParameterSetupCommunication"/>
                <xs:element dfdl:choiceBranchKey="4" name="s7ResponseParameterReadVar"
                            type="s7:S7ResponseParameterReadVar"/>
                <xs:element dfdl:choiceBranchKey="5" name="s7ResponseParameterWriteVar"
                            type="s7:S7ResponseParameterWriteVar"/>
                <xs:element dfdl:choiceBranchKey="0" name="s7UserDataParameterCPUService"
                            type="s7:S7UserDataParameterCPUService"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7GeneralParameterSetupCommunication">
        <xs:sequence>
            <!-- Reserved value always 0x00 -->
            <xs:element name="reserved" type="plc4x:uint8" fixed="0"/>
            <xs:element name="maxAmqCaller" type="plc4x:uint16"/>
            <xs:element name="maxAmqCallee" type="plc4x:uint16"/>
            <xs:element name="pduLength" type="plc4x:uint16"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7UserDataParameterCPUService">
        <xs:sequence>
            <!-- Fixed header 0x0112 274 -> -->
            <xs:element name="header" type="plc4x:uint16"/><!-- fixed="274"-->
            <xs:element name="paramLength" type="plc4x:uint8"/><!-- fixed="4"-->
            <!-- Request: 0x11 -> 17 -->
            <xs:element name="typeCode" type="plc4x:uint8"/><!-- fixed="17"-->
            <xs:element name="type" type="plc4x:uintN" dfdl:length="4"/>
            <!-- First 4 bits: Request 0x40, last 4 bits: Function Group 0x04 = 0x44 -> 68 -->
            <xs:element name="functionGroup" type="plc4x:uintN" dfdl:length="4"/><!-- fixed="68"-->
            <!-- READ SSL = 0x01 -->
            <xs:element name="subFunctionGroup" type="plc4x:uint8"/><!-- fixed="1"-->
            <xs:element name="sequenceNumber" type="plc4x:uint8"/>
            <xs:element name="dataUnitReferenceNumber" type="plc4x:uint8" minOccurs="0"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../sequenceNumber eq 2) then 1 else 0}"/>
            <xs:element name="lastDataUnit" type="plc4x:uint8" minOccurs="0"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../sequenceNumber eq 2) then 1 else 0}"/>
            <xs:element name="errorCode" type="plc4x:uint16" minOccurs="0"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../sequenceNumber eq 2) then 1 else 0}"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7RequestParameterReadVar">
        <xs:sequence>
            <xs:element name="numItems" type="plc4x:uint8"/>
            <xs:element name="items" minOccurs="0"
                        dfdl:occursCountKind="expression" dfdl:occursCount="{if(../numItems gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="item" minOccurs="0" maxOccurs="unbounded"
                                    dfdl:occursCountKind="expression" dfdl:occursCount="{../../numItems}">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="type" type="plc4x:uint8"/>
                                    <xs:choice dfdl:choiceDispatchKey="{xs:string(type)}">
                                        <xs:element dfdl:choiceBranchKey="18" name="s7RequestParameterReadVarAnyItem"
                                                    type="s7:S7RequestParameterReadVarAnyItem"/>
                                    </xs:choice>
                                </xs:sequence>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7RequestParameterReadVarAnyItem">
        <xs:sequence>
            <xs:element name="paramLength" type="plc4x:uint8"/><!-- fixed="10"-->
            <!-- Addressing Mode: Any 0x10 -> 16 -->
            <xs:element name="addressingMode" type="plc4x:uint8"/><!-- fixed="16"-->
            <xs:element name="dataType" type="plc4x:uint8"/>
            <xs:element name="numElements" type="plc4x:uint16"/>
            <xs:element name="dataBlockNumber" type="plc4x:uint16"/>
            <xs:element name="memoryArea" type="plc4x:uint8"/>
            <!--
             The next 3 bytes (24 bits) contain the byte- and bit-offset,
             were the last byte contains the bit-offset in the last 3 bits
             and the byteOffset is encoded in the higher level 21 bits
            -->
            <xs:element name="byteOffset" type="plc4x:uintN" dfdl:length="21"/>
            <xs:element name="bitOffset" type="plc4x:uintN" dfdl:length="3"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7ResponseParameterReadVar">
        <xs:sequence>
            <xs:element name="numItems" type="plc4x:uint8"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7RequestParameterWriteVar">
        <xs:sequence>
            <xs:element name="numItems" type="plc4x:uint8"/>
            <xs:element name="items" minOccurs="0"
                        dfdl:occursCountKind="expression" dfdl:occursCount="{if(../numItems gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="item" minOccurs="0" maxOccurs="unbounded"
                                    dfdl:occursCountKind="expression" dfdl:occursCount="{../../numItems}">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="type" type="plc4x:uint8"/>
                                    <xs:choice dfdl:choiceDispatchKey="{xs:string(type)}">
                                        <xs:element dfdl:choiceBranchKey="18" name="s7RequestParameterWriteVarAnyItem"
                                                    type="s7:S7RequestParameterWriteVarAnyItem"/>
                                    </xs:choice>
                                </xs:sequence>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7RequestParameterWriteVarAnyItem">
        <xs:sequence>
            <xs:element name="itemLength" type="plc4x:uint8"/><!-- fixed="10"-->
            <!-- Addressing Mode: Any 0x10 -> 16 -->
            <xs:element name="addressingMode" type="plc4x:uint8"/><!-- fixed="16"-->
            <xs:element name="dataType" type="plc4x:uint8"/>
            <xs:element name="numElements" type="plc4x:uint16"/>
            <xs:element name="dataBlockNumber" type="plc4x:uint16"/>
            <xs:element name="memoryArea" type="plc4x:uint8"/>
            <!--
             The next 3 bytes (24 bits) contain the byte- and bit-offset,
             were the last byte contains the bit-offset in the last 3 bits
             and the byteOffset is encoded in the higher level 21 bits
            -->
            <xs:element name="byteOffset" type="plc4x:uintN" dfdl:length="21"/>
            <xs:element name="bitOffset" type="plc4x:uintN" dfdl:length="3"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7ResponseParameterWriteVar">
        <xs:sequence>
            <xs:element name="numItems" type="plc4x:uint8"/>
        </xs:sequence>
    </xs:complexType>

    <!--

        Payloads.

    -->

    <xs:complexType name="S7Payload">
        <xs:sequence>
            <xs:choice
                dfdl:choiceDispatchKey="{xs:string(../../parameters[1]/parameter[dfdl:occursIndex()]/type)}">
                <xs:element dfdl:choiceBranchKey="240" name="s7GeneralPayloadSetupCommunication"
                            type="s7:S7GeneralPayloadSetupCommunication"/>
                <xs:element dfdl:choiceBranchKey="4" name="s7ResponsePayloadReadVar"
                            type="s7:S7ResponsePayloadReadVar"/>
                <xs:element dfdl:choiceBranchKey="5" name="s7ResponsePayloadWriteVar"
                            type="s7:S7ResponsePayloadWriteVar"/>
                <xs:element dfdl:choiceBranchKey="0" name="s7UserDataPayloadCpuServices"
                            type="s7:S7UserDataPayloadCpuServices"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7GeneralPayloadSetupCommunication">
        <xs:sequence>
            <xs:element name="data" type="plc4x:null"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7UserDataPayloadCpuServices">
        <xs:sequence>
            <xs:element name="returnCode" type="plc4x:uint8"/>
            <xs:element name="transportSize" type="plc4x:uint8"/><!-- fixed="9"-->
            <xs:element name="length" type="plc4x:uint16"/>
            <xs:element name="sslId" type="plc4x:uint16" minOccurs="0"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../returnCode eq 255) then 1 else 0}"/>
            <xs:element name="sslIndex" type="plc4x:uint16" minOccurs="0"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if(../returnCode eq 255) then 1 else 0}"/>
            <xs:element name="partialList" minOccurs="0"
                        dfdl:occursCountKind="expression"
                        dfdl:occursCount="{if((../returnCode eq 255) and (../length gt 4)) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="partialListLengthInBytes" type="plc4x:uint16"/>
                        <xs:element name="partialListCount" type="plc4x:uint16"/>
                        <xs:element name="sslDataRecords">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="sslDataRecord" maxOccurs="unbounded"
                                                dfdl:occursCountKind="expression"
                                                dfdl:occursCount="{../../partialListCount}">
                                        <xs:complexType>
                                            <xs:sequence>
                                                <xs:choice dfdl:choiceDispatchKey="{xs:string(../../../sslId[1])}">
                                                    <xs:element dfdl:choiceBranchKey="17"
                                                                name="s7ResponsePayloadCpuServicesSslDataRecordModuleIdentification"
                                                                type="s7:S7ResponsePayloadCpuServicesSslDataRecordModuleIdentification"/>
                                                </xs:choice>
                                            </xs:sequence>
                                        </xs:complexType>
                                    </xs:element>
                                </xs:sequence>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7ResponsePayloadCpuServicesSslDataRecordModuleIdentification">
        <xs:sequence>
            <xs:element name="index" type="plc4x:uint16"/>
            <xs:element name="articleNumber" type="plc4x:stringN" dfdl:length="20"/>
            <xs:element name="bgType" type="plc4x:uint16"/>
            <xs:element name="moduleOrOsVersion" type="plc4x:uint16"/>
            <xs:element name="pgDescriptionFileVersion" type="plc4x:uint16"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7RequestPayloadReadVar">
        <xs:sequence>
            <xs:element name="data" type="plc4x:null"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7ResponsePayloadReadVar">
        <xs:sequence>
            <!-- The number of items which should be read is transmitted in the matching parameter -->
            <xs:element name="numItems" type="plc4x:uint8"
                        dfdl:inputValueCalc="{
                                ../../../../parameters[1]/parameter[dfdl:occursIndex()]/s7ResponseParameterReadVar/numItems
                            }"/>
            <xs:element name="items" minOccurs="0"
                        dfdl:occursCountKind="expression" dfdl:occursCount="{if(../numItems gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="item" minOccurs="0" maxOccurs="unbounded"
                                    dfdl:occursCountKind="expression" dfdl:occursCount="{../../numItems}">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="returnCode" type="plc4x:uint8"/>
                                    <xs:element name="transportSize" type="plc4x:uint8"/>
                                    <xs:element name="rawLength" type="plc4x:uint16"/>
                                    <!--
                                        For some reason the types BIT, BYTE_WORD_DWORD and INTEGER are transferred in "bits",
                                        the rest is transferred in "bytes"
                                    -->
                                    <xs:element name="lengthInBytes" type="plc4x:uint16" dfdl:inputValueCalc="{
                                    xs:unsignedShort(if((../transportSize eq 3) or (../../transportSize eq 4) or (../transportSize eq 5))
                                            then fn:ceiling(xs:double(../../rawLength div 8))
                                            else ../rawLength)}"/>
                                    <xs:element name="data" type="plc4x:byteN" dfdl:length="{../lengthInBytes}"/>
                                    <!--
                                        Transport sizes: BIT, BYTE_WORD_DWORD and OCTET_STRING require a blank byte.
                                        However only if this is not the last item in the result.
                                    -->
                                    <xs:element name="fillByte" type="plc4x:uint8" minOccurs="0"
                                                dfdl:occursCountKind="expression" dfdl:occursCount="{
                                            if(((../lengthInBytes mod 2) eq 1) and
                                                (dfdl:occursIndex() ne ../../../numItems)) then 1 else 0}"/>                                </xs:sequence>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7RequestPayloadWriteVar">
        <xs:sequence>
            <!-- The number of items which should be read is transmitted in the matching parameter -->
            <xs:element name="numItems" type="plc4x:uint8"
                        dfdl:inputValueCalc="{
                                ../../../../parameters[1]/parameter[dfdl:occursIndex()]/s7RequestParameterWriteVar/numItems
                            }"/>
            <xs:element name="items" minOccurs="0"
                        dfdl:occursCountKind="expression" dfdl:occursCount="{if(../numItems gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="item" minOccurs="0" maxOccurs="unbounded"
                                    dfdl:occursCountKind="expression" dfdl:occursCount="{../../numItems}">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="returnCode" type="plc4x:uint8"/>
                                    <xs:element name="transportSize" type="plc4x:uint8"/>
                                    <xs:element name="rawLength" type="plc4x:uint16"/>
                                    <!--
                                        For some reason the types BIT, BYTE_WORD_DWORD and INTEGER are transferred in "bits",
                                        the rest is transferred in "bytes"
                                    -->
                                    <xs:element name="lengthInBytes" type="plc4x:uint16" dfdl:inputValueCalc="{
                                    xs:unsignedShort(if((../transportSize eq 3) or (../transportSize eq 4) or (../transportSize eq 5))
                                            then fn:ceiling(../rawLength div 8)
                                            else ../rawLength)}"/>
                                    <xs:element name="data" type="plc4x:byteN" dfdl:length="{../lengthInBytes}"/>
                                    <!--
                                        It seems that the item payload must always be an even number of bytes. So if it's
                                        not an even number, add a fill byte.
                                    -->
                                    <xs:element name="fillByte" type="plc4x:uint8" minOccurs="0"
                                                dfdl:occursCountKind="expression" dfdl:occursCount="{
                                            if(((../lengthInBytes mod 2) eq 1) and
                                                (dfdl:occursIndex() ne ../../../numItems)) then 1 else 0}"/>
                                </xs:sequence>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="S7ResponsePayloadWriteVar">
        <xs:sequence>
            <!-- The number of items which should be read is transmitted in the matching parameter -->
            <xs:element name="numItems" type="plc4x:uint8"
                        dfdl:inputValueCalc="{
                                ../../../../parameters[1]/parameter[dfdl:occursIndex()]/s7ResponseParameterWriteVar/numItems
                            }"/>
            <xs:element name="items" minOccurs="0"
                        dfdl:occursCountKind="expression" dfdl:occursCount="{if(../numItems gt 0) then 1 else 0}">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="item" minOccurs="0" maxOccurs="unbounded"
                                    dfdl:occursCountKind="expression" dfdl:occursCount="{../../numItems}">
                            <xs:complexType>
                                <xs:sequence>
                                    <xs:element name="returnCode" type="plc4x:uint8"/>
                                </xs:sequence>
                            </xs:complexType>
                        </xs:element>
                    </xs:sequence>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
    </xs:complexType>

</xs:schema>