<#--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

	  https://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<#-- Prevent freemarker from escaping stuff -->
<#outputformat "undefined">
<#-- Declare the name and type of variables passed in to the template -->
<#-- @ftlvariable name="languageName" type="java.lang.String" -->
<#-- @ftlvariable name="protocolName" type="java.lang.String" -->
<#-- @ftlvariable name="outputFlavor" type="java.lang.String" -->
<#-- @ftlvariable name="helper" type="org.apache.plc4x.language.go.GoLanguageTemplateHelper" -->
<#-- @ftlvariable name="tracer" type="org.apache.plc4x.plugins.codegenerator.protocol.freemarker.Tracer" -->
<#-- @ftlvariable name="type" type="org.apache.plc4x.plugins.codegenerator.types.definitions.ComplexTypeDefinition" -->
${helper.fileName(protocolName, languageName, outputFlavor)?replace(".", "/")}/model/${type.name}.go
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

<#macro importSectionWithContentBelow>
	<#local sectionContent><#nested></#local>
import (
	"context"
	<#if helper.getRequiredImports()?has_content>
	<#list helper.getRequiredImports() as import>
	${import}
	</#list>
	</#if>
	"github.com/rs/zerolog"
)

	${sectionContent}
</#macro>

<#macro emitImport import>${helper.emitRequiredImport(import)}</#macro>
<#macro emitImportWithAlias alias import>${helper.emitRequiredImport(alias, import)}</#macro>

<@importSectionWithContentBelow><@emitImport import="github.com/apache/plc4x/plc4go/spi/utils" />
// Code generated by code-generation. DO NOT EDIT.

<#-- TODO: the code below implies that parserArguments will be null if not present... not pretty  -->
<#if type.parserArguments.isPresent()><#assign parserArguments=type.allParserArguments.orElseThrow()></#if>
<#if type.constFields?has_content>

// Constant values.
	<#list type.constFields as field>
		<#if helper.isEnumField(field)>
const ${type.name}_${field.name?upper_case} ${helper.getLanguageTypeNameForField(field)} = ${helper.toParseExpression(field, field.type, field.referenceValue, parserArguments)}
		<#else>
const ${type.name}_${field.name?upper_case} ${helper.getLanguageTypeNameForField(field)} = ${helper.toParseExpression(field, field.type, field.referenceValue, parserArguments)}
		</#if>
	</#list>
</#if>

// ${type.name} is the corresponding interface of ${type.name?cap_first}
type ${type.name} interface {
	fmt.Stringer<@emitImport import="fmt" />
	utils.LengthAware
	utils.Serializable
<#if type.isDiscriminatedChildTypeDefinition()>
	${type.parentType.orElseThrow().name?cap_first}
</#if>
<#if type.isDiscriminatedParentTypeDefinition()>
	<#list helper.getDiscriminatorTypes() as discriminatorName, discriminatorType>
	<#-- If the discriminator name matches that of another field, suppress the methods generation -->
		<#if !type.isNonDiscriminatorField(discriminatorName)>
	// Get${discriminatorName?cap_first} returns ${discriminatorName?cap_first} (discriminator field)
	Get${discriminatorName?cap_first}() ${helper.getLanguageTypeNameForTypeReference(discriminatorType)}
		</#if>
	</#list>
</#if>
<#list type.propertyFields as field>
    <#assign typeRef=field.asTypedField().orElseThrow().type>
	// Get${field.name?cap_first} returns ${field.name?cap_first} (property field)
	Get${field.name?cap_first}() <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)}
</#list>
<#list type.virtualFields as field>
    <#assign typeRef=field.asTypedField().orElseThrow().type>
	// Get${field.name?cap_first} returns ${field.name?cap_first} (virtual field)
	Get${field.name?cap_first}() <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)}
</#list>
<#list type.abstractFields as field>
	<#assign namedField=field.asNamedField().orElseThrow()>
	// Get${namedField.name?cap_first} returns ${namedField.name?cap_first} (abstract field)
	Get${namedField.name?cap_first}() ${helper.getLanguageTypeNameForField(field)}
</#list>
}

// ${type.name}Exactly can be used when we want exactly this type and not a type which fulfills ${type.name}.
// This is useful for switch cases.
type ${type.name}Exactly interface {
	${type.name}
	is${type.name}() bool
}

// _${type.name} is the data-structure of this message
type _${type.name} struct {
<#if type.parentType.isPresent()>
	*_${type.parentType.orElseThrow().name}
</#if>
<#if type.isDiscriminatedParentTypeDefinition()>
	_${type.name}ChildRequirements
</#if>
<#-- Property fields are fields that require a property in the pojo -->
<#if type.propertyFields?has_content>
    <#list type.propertyFields as field>
        ${field.name?cap_first} <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForField(field)}
    </#list>
</#if>
<#if parserArguments?has_content>
    <#assign filteredParserArguments=parserArguments?filter(arg -> !type.isDiscriminatorField(arg.name) && !type.getPropertyFieldFromThisOrParentByName(arg.name).isPresent())>
	<#assign filteredParserArgumentsLocalToType=filteredParserArguments?filter(arg->type.getParentType().isEmpty()||(type.getParentType().orElseThrow().getAllParserArguments().isEmpty()||!type.getParentType().orElseThrow().isParserArgument(arg.name)))>
</#if>
<#if filteredParserArgumentsLocalToType?has_content>

	// Arguments.
    <#list filteredParserArgumentsLocalToType as parserArgument>
	${parserArgument.name?cap_first} ${helper.getLanguageTypeNameForTypeReference(parserArgument.type)}
    </#list>
</#if>
<#assign reservedFields=type.getFields()?filter(f->f.isReservedField())>
<#if reservedFields?has_content>
	// Reserved Fields
	<#list reservedFields as reservedField>
	reservedField${reservedField?index} *${helper.getLanguageTypeNameForTypeReference(reservedField.asReservedField().orElseThrow().type)}
	</#list>
</#if>
}

<#if type.isDiscriminatedParentTypeDefinition()>
type _${type.name}ChildRequirements interface {
	utils.Serializable
	GetLengthInBits(ctx context.Context) uint16
    <#list helper.discriminatorTypes as discriminatorName, discriminatorType>
    <#-- If the discriminator name matches that of another field, suppress the methods generation -->
        <#if type.isDiscriminatorField(discriminatorName)>
	Get${discriminatorName?cap_first}() <#if discriminatorType.isNonSimpleTypeReference() && !discriminatorType.isEnumTypeReference()>I</#if>${helper.getLanguageTypeNameForTypeReference(discriminatorType)}
        </#if>
    </#list>
    <#list type.abstractFields as field>
        <#assign namedField=field.asNamedField().orElseThrow()>
		// Get${namedField.name?cap_first} returns ${namedField.name?cap_first} (abstract field)
		Get${namedField.name?cap_first}() ${helper.getLanguageTypeNameForField(field)}
    </#list>
}
</#if>

<#if type.isDiscriminatedChildTypeDefinition()>
	<#assign discriminatedChildType = type.asDiscriminatedComplexTypeDefinition().orElseThrow()>

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

	<#list discriminatedChildType.getDiscriminatorMap() as discriminatorName, discriminatorTerm>
		<#-- If the discriminator name matches that of another field, suppress the methods generation -->
		<#if !type.isNonDiscriminatorField(discriminatorName)>
			<#assign typeRef=helper.getDiscriminatorTypes(discriminatedChildType.parentType.orElseThrow())[discriminatorName]>
func (m *_${type.name})  Get${discriminatorName?cap_first}() <#if typeRef.isNonSimpleTypeReference() && !typeRef.isEnumTypeReference()>I</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)} {
			<@compress single_line=true>
				return
				<#if discriminatorTerm?? && !helper.isWildcard(discriminatorTerm)>
					<#if typeRef.isNonSimpleTypeReference()>
						<#if typeRef.isEnumTypeReference()>
							<#assign enumType=helper.getLanguageTypeNameForTypeReference(typeRef)>
							<#assign enumTypeWithoutTraces=tracer.removeTraces(enumType)>
							<#assign enumTypeTraces=tracer.extractTraces(enumType)>
							<#assign enumValue=helper.toParseExpression(null, typeRef, discriminatorTerm, parserArguments)>
							<#assign enumValueWithoutTraces=tracer.removeTraces(enumValue)>
							<#assign enumValueTraces=tracer.extractTraces(enumValue)>
							${enumTypeTraces}${enumValueTraces}${enumTypeWithoutTraces}_${enumValueWithoutTraces?replace("Get","")?replace("()","")}
						<#else>
							${helper.toParseExpression(null, typeRef, discriminatorTerm, parserArguments)}
						</#if>
					<#else>
						${helper.toParseExpression(null, typeRef, discriminatorTerm, parserArguments)}
					</#if>
				<#else>
					${helper.getNullValueForTypeReference(typeRef)}
				</#if>
			</@compress>
}

		</#if>
	</#list>
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
</#if>
<#if type.isDiscriminatedParentTypeDefinition()>

type ${type.name}Parent interface {
	SerializeParent(ctx context.Context, writeBuffer utils.WriteBuffer, child ${type.name}, serializeChildFunction func() error) error
	GetTypeName() string
}

type ${type.name}Child interface {
	utils.Serializable
<@compress single_line=true>
	InitializeParent(parent ${type.name}
	<#if type.getPropertyFields()?has_content>, </#if>
	<#list type.getPropertyFields() as field>
		${field.name}

		<#if helper.needsPointerAccess(field)>*</#if>
		${helper.getLanguageTypeNameForField(field)}
		<#sep>, </#sep>
	</#list>
	)
</@compress>

	GetParent() *${type.name}

	GetTypeName() string
	${type.name}
}
<#elseif type.parentType.isPresent()>

<@compress single_line=true>
func (m *_${type.name}) InitializeParent(parent ${type.parentType.orElseThrow().name}
	<#assign parentTypeHasPropertyFields=type.parentType.orElseThrow().asComplexTypeDefinition().orElseThrow().allPropertyFields?has_content>
	<#if parentTypeHasPropertyFields>, </#if>
    <#list type.parentPropertyFields as parentField>
        ${parentField.name}

        <#if helper.needsPointerAccess(parentField)>*</#if>
        ${helper.getLanguageTypeNameForField(parentField)}
        <#sep>, </#sep>
    </#list>
	)
	{
</@compress>
	<#list type.parentType.orElseThrow().asComplexTypeDefinition().orElseThrow().allPropertyFields as field>
	m.${field.name?cap_first} = ${field.name}
	</#list>
}

func (m *_${type.name})  GetParent() ${type.parentType.orElseThrow().name} {
	return m._${type.parentType.orElseThrow().name}
}
</#if>
<#if type.propertyFields?has_content>
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

	<#list type.propertyFields as field>
    	<#assign typeRef=field.asTypedField().orElseThrow().type>
func (m *_${type.name}) Get${field.name?cap_first}() <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)} {
	return m.${field.name?cap_first}
}

	</#list>
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
</#if>
<#if type.virtualFields?has_content>
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

	<#list type.virtualFields as field>
		<#assign typeRef=field.asTypedField().orElseThrow().type>
func (m *_${type.name}) Get${field.name?cap_first}() <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)} {
	<#-- TODO: This should only be output, if ctx is needed -->
	ctx := context.Background()
	_ = ctx
  	  <#list type.propertyFields?filter(f->f.isOptionalField()) as field>
	${field.name} := m.${field.name?cap_first}
	_ = ${field.name}
  	  </#list>
	  <#if typeRef.isStringTypeReference() || typeRef.isVstringTypeReference()>
    return fmt.Sprintf("%v", ${helper.toSerializationExpression(field, field.type, field.valueExpression, parserArguments)})<@emitImport import="fmt" />
	  <#else>
	return <#if typeRef.isNonSimpleTypeReference()>Cast</#if>${helper.getLanguageTypeNameForTypeReference(typeRef)}(${helper.toSerializationExpression(field, field.type, field.valueExpression, parserArguments)})
	  </#if>
}

	</#list>
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
</#if>
<#if type.abstractFields?has_content>
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for abstract fields.
///////////////////////

	<#list type.abstractFields as field>
        <#assign typeRef=field.asTypedField().orElseThrow().type>
		func (m *_${type.name}) Get${field.name?cap_first}() ${helper.getLanguageTypeNameForTypeReference(typeRef)} {
			return m._${type.name}ChildRequirements.Get${field.name?cap_first}()
		}

	</#list>
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
</#if>
<#if type.constFields?has_content>
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for const fields.
///////////////////////

	<#list type.constFields as field>
		<#assign typeRef=field.asTypedField().orElseThrow().type>
func (m *_${type.name}) Get${field.name?cap_first}() ${helper.getLanguageTypeNameForTypeReference(typeRef)} {
	return ${type.name}_${field.name?upper_case}
}

	</#list>
///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
</#if>

<#if type.parentType.isPresent() && type.parentType.orElseThrow().allParserArguments.isPresent()>
    <#assign filteredParentParserArguments = type.parentType.orElseThrow().allParserArguments.orElseThrow()?filter(arg -> !type.parentType.orElseThrow().asComplexTypeDefinition().orElseThrow().isDiscriminatorField(arg.name))>
</#if>

// New${type.name} factory function for _${type.name}
<@compress single_line=true>
func New${type.name}(
	<#list type.propertyFields as field>
		${field.name} <#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForField(field)}
		<#sep>, </#sep>
	</#list>
	<#if type.parentType.isPresent()>
		<#if type.propertyFields?has_content && type.parentPropertyFields?has_content>, </#if>
		<#list type.parentPropertyFields as parentField>
			${parentField.name} <#if helper.needsPointerAccess(parentField)>*</#if>${helper.getLanguageTypeNameForField(parentField)}
			<#sep>, </#sep>
		</#list>
	</#if>
    <#if filteredParserArguments?has_content>
        <#if type.allPropertyFields?has_content>, </#if>
        <#list filteredParserArguments as parserArgument>
			${parserArgument.name} ${helper.getLanguageTypeNameForTypeReference(parserArgument.type)}
            <#sep>, </#sep>
        </#list>
    </#if>
	) *_${type.name} {
</@compress>

<#if type.parentType.isPresent()>
	_result := &_${type.name}{
	<#list type.propertyFields as field>
		${field.name?cap_first}: ${field.name},
	</#list>
    	_${type.parentType.orElseThrow().name}: New${type.parentType.orElseThrow().name}(<#list type.parentPropertyFields as parentField>${parentField.name}<#sep>, </#list><#if filteredParentParserArguments?has_content><#if type.parentPropertyFields?has_content>, </#if><#list filteredParentParserArguments as arg>${arg.name}<#sep>, </#sep></#list></#if>),
	}
	_result._${type.parentType.orElseThrow().name}._${type.parentType.orElseThrow().name}ChildRequirements = _result
	return _result
<#else>
	<@compress single_line=true>
	return &_${type.name}{
		<#list type.propertyFields as field>
			${field.name?cap_first}: ${field.name}
			<#sep>, </#sep>
		</#list>
        <#if filteredParserArguments?has_content>
            <#if type.propertyFields?has_content>, </#if>
            <#list filteredParserArguments as parserArgument>
                ${parserArgument.name?cap_first}: ${parserArgument.name}
                <#sep>, </#sep>
            </#list>
        </#if>
	}
    </@compress>

</#if>
}

// Deprecated: use the interface for direct cast
func Cast${type.name}(structType any) ${type.name} {
    if casted, ok := structType.(${type.name}); ok {
		return casted
	}
	if casted, ok := structType.(*${type.name}); ok {
		return *casted
	}
	return nil
}

func (m *_${type.name}) GetTypeName() string {
	return "${type.name}"
}

<#if !type.isDiscriminatedParentTypeDefinition()>
func (m *_${type.name}) GetLengthInBits(ctx context.Context) uint16 {
		<#if type.isDiscriminatedChildTypeDefinition()>
	lengthInBits := uint16(m.GetParentLengthInBits(ctx))
		<#else>
	lengthInBits := uint16(0)
		</#if>
		<#list type.fields as field>
			<#switch field.typeName>
				<#case "array">
					<#assign arrayField = field.asArrayField().orElseThrow()>
                    <#assign arrayElementType = arrayField.type.elementTypeReference>

	// Array field
	if len(m.${arrayField.name?cap_first}) > 0 {
				<#if arrayElementType.isVstringTypeReference()>
                    <#assign vstringTypeReference = arrayElementType.asVstringTypeReference().orElseThrow()>
		lengthInBits += uint16(${helper.toSerializationExpression(arrayField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)}) * uint16(len(m.${arrayField.name?cap_first}))
				<#elseif arrayElementType.isSimpleTypeReference()>
                    <#assign simpleTypeReference = arrayElementType.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits} * uint16(len(m.${arrayField.name?cap_first}))
				<#else>
				<#if arrayField.isCountArrayField()>
		for _curItem, element := range m.${arrayField.name?cap_first} {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.${arrayField.name?cap_first}), _curItem)
			<#-- TODO: find a way to do this nicer -->
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{GetLengthInBits(context.Context) uint16}).GetLengthInBits(arrayCtx)
				<#else>
		for _, element := range m.${arrayField.name?cap_first} {
			lengthInBits += element.GetLengthInBits(ctx)
				</#if>
		}
				</#if>
	}
					<#break>
				<#case "checksum">
					<#assign checksumField = field.asChecksumField().orElseThrow()>
					<#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

	// Checksum Field (checksum)
	lengthInBits += ${simpleTypeReference.sizeInBits}
					<#break>
				<#case "const">
					<#assign constField = field.asConstField().orElseThrow()>

	// Const Field (${constField.name})
				<#if constField.type.isVstringTypeReference()>
					<#assign vstringTypeReference = constField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(constField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
				<#else>
                    <#assign simpleTypeReference = constField.type.asSimpleTypeReference().orElseThrow()>
	lengthInBits += ${simpleTypeReference.sizeInBits}
				</#if>
					<#break>
				<#case "discriminator">
					<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
	// Discriminator Field (${discriminatorField.name})
		<#if discriminatorField.type.isSimpleTypeReference()>
            <#assign simpleTypeReference = discriminatorField.type.asSimpleTypeReference().orElseThrow()>
			<#if discriminatorField.type.isVstringTypeReference()>
                <#assign vstringTypeReference = discriminatorField.type.asVstringTypeReference().orElseThrow()>
			lengthInBits += uint16(${helper.toSerializationExpression(discriminatorField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
			<#else>
			lengthInBits += ${simpleTypeReference.sizeInBits};
			</#if>
		<#elseif helper.isEnumField(discriminatorField)>
		lengthInBits += ${helper.getEnumBaseTypeReference(discriminatorField.type).sizeInBits};
		<#else>
		lengthInBits += ${discriminatorField.name}.getLengthInBits();
		</#if>
					<#break>
				<#case "enum">
					<#assign enumField = field.asEnumField().orElseThrow()>

	// Enum Field (${enumField.name})
	lengthInBits += ${helper.getEnumBaseTypeReference(enumField.type).sizeInBits}
					<#break>
				<#case "implicit">
					<#assign implicitField = field.asImplicitField().orElseThrow()>
					<#assign simpleTypeReference = implicitField.type.asSimpleTypeReference().orElseThrow()>

	// Implicit Field (${implicitField.name})
	lengthInBits += ${simpleTypeReference.sizeInBits}
					<#break>
				<#case "manualArray">
					<#assign manualArrayField = field.asManualArrayField().orElseThrow()>
	                <#assign arrayElementType = manualArrayField.type.elementTypeReference>

	// Manual Array Field (${manualArrayField.name})
	lengthInBits += uint16(${helper.toSerializationExpression(manualArrayField, helper.intTypeReference, manualArrayField.lengthExpression, parserArguments)})
					<#break>
				<#case "manual">
					<#assign manualField = field.asManualField().orElseThrow()>

	// Manual Field (${manualField.name})
	lengthInBits += uint16(${helper.toSerializationExpression(manualField, helper.intTypeReference, manualField.lengthExpression, parserArguments)})
					<#break>
				<#case "optional">
					<#assign optionalField = field.asOptionalField().orElseThrow()>

	// Optional Field (${optionalField.name})
	if m.${optionalField.name?cap_first} != nil {
					<#if optionalField.type.isSimpleTypeReference()>
						<#assign simpleTypeReference = optionalField.type.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits}
					<#elseif helper.isEnumField(optionalField)>
		lengthInBits += ${helper.getEnumBaseTypeReference(optionalField.type).sizeInBits}
                    <#elseif optionalField.type.isComplexTypeReference()>
		lengthInBits += m.${optionalField.name?cap_first}.GetLengthInBits(ctx)
					<#else>
		lengthInBits += (*m.${optionalField.name?cap_first}).GetLengthInBits(ctx)
					</#if>
	}
					<#break>
				<#case "padding">
					<#assign paddingField = field.asPaddingField().orElseThrow()>
					<#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

	// Padding Field (padding)
	_timesPadding := uint8(${helper.toSerializationExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)})
	for ;_timesPadding > 0; _timesPadding-- {
		lengthInBits += ${simpleTypeReference.sizeInBits}
	}
					<#break>
				<#case "reserved">
					<#assign reservedField = field.asReservedField().orElseThrow()>
					<#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

	// Reserved Field (reserved)
	lengthInBits += ${simpleTypeReference.sizeInBits}
					<#break>
				<#case "simple">
					<#assign simpleField = field.asSimpleField().orElseThrow()>

	// Simple field (${simpleField.name})
					<#if simpleField.type.isSimpleTypeReference()>
						<#if simpleField.type.isVstringTypeReference()>
							<#assign vstringTypeReference = simpleField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(simpleField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
						<#else>
							<#assign simpleTypeReference = simpleField.type.asSimpleTypeReference().orElseThrow()>
	lengthInBits += ${simpleTypeReference.sizeInBits};
						</#if>
					<#elseif helper.isEnumField(field)>
	lengthInBits += ${helper.getEnumBaseTypeReference(simpleField.type).sizeInBits}
					<#else>
	lengthInBits += m.${simpleField.name?cap_first}.GetLengthInBits(ctx)
					</#if>
					<#break>
				<#case "switch">
					<#assign switchField = field.asSwitchField().orElseThrow()>

	// Length of sub-type elements will be added by sub-type...
	lengthInBits += m.GetLengthInBits(ctx)
					<#break>
				<#case "unknown">
					<#assign unknownField = field.asUnknownField().orElseThrow()>
					<#assign simpleTypeReference = unknownField.type.asSimpleTypeReference().orElseThrow()>

	// Unknown field
	lengthInBits += ${simpleTypeReference.sizeInBits}

					<#break>
				<#case "virtual">
					<#assign virtualField = field.asVirtualField().orElseThrow()>

	// A virtual field doesn't have any in- or output.
					<#break>
			</#switch>
		</#list>

	return lengthInBits
}
</#if>

<#if type.isDiscriminatedParentTypeDefinition()>
func (m *_${type.name}) GetParentLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(0)
	<#list type.fields as field>
		<#switch field.typeName>
			<#case "array">
				<#assign arrayField = field.asArrayField().orElseThrow()>
                <#assign arrayElementType = arrayField.type.elementTypeReference>

	// Array field
	if len(m.${arrayField.name?cap_first}) > 0 {
				<#if arrayElementType.isVstringTypeReference()>
					<#assign vstringTypeReference=arrayElementType.asVstringTypeReference().orElseThrow()>
		lengthInBits += uint16(${helper.toSerializationExpression(arrayField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)}) * uint16(len(m.${arrayField.name?cap_first}))
				<#elseif arrayElementType.isSimpleTypeReference()>
                    <#assign simpleTypeReference = arrayElementType.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits} * uint16(len(m.${arrayField.name?cap_first}))
				<#else>
					<#if arrayField.isCountArrayField()>
		for _curItem, element := range m.${arrayField.name?cap_first} {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.${arrayField.name?cap_first}), _curItem)
            <#-- TODO: find a way to do this nicer -->
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{GetLengthInBits(context.Context) uint16}).GetLengthInBits(arrayCtx)
					<#else>
		for _, element := range m.${arrayField.name?cap_first} {
			lengthInBits += element.GetLengthInBits(ctx)
					</#if>
		}
				</#if>
				}
				<#break>
			<#case "checksum">
				<#assign checksumField = field.asChecksumField().orElseThrow()>
				<#assign simpleTypeReference = checksumField.type.asSimpleTypeReference().orElseThrow()>

	// Checksum Field (checksum)
	lengthInBits += ${simpleTypeReference.sizeInBits}
				<#break>
			<#case "const">
				<#assign constField = field.asConstField().orElseThrow()>
				<#assign simpleTypeReference = constField.type>

	// Const Field (${constField.name})
				<#if constField.type.isVstringTypeReference()>
                    <#assign vstringTypeReference = constField.type.asVstringTypeReference().orElseThrow()>
					lengthInBits += uint16(${helper.toSerializationExpression(constField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
				<#elseif constField.type.isEnumTypeReference()>
	lengthInBits += ${helper.getEnumBaseTypeReference(constField.type).sizeInBits};
				<#else>
	lengthInBits += ${simpleTypeReference.asSimpleTypeReference().orElseThrow().sizeInBits}
				</#if>
				<#break>
			<#case "discriminator">
				<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
				<#assign simpleTypeReference = discriminatorField.type>
	// Discriminator Field (${discriminatorField.name})
				<#if simpleTypeReference.isSimpleTypeReference()>
					<#if discriminatorField.type.isVstringTypeReference()>
                        <#assign vstringTypeReference = discriminatorField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(discriminatorField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
					<#else>
	lengthInBits += ${simpleTypeReference.asSimpleTypeReference().orElseThrow().sizeInBits};
					</#if>
				<#elseif helper.isEnumField(discriminatorField)>
	lengthInBits += ${helper.getEnumBaseTypeReference(discriminatorField.type).sizeInBits};
				<#else>
	lengthInBits += ${discriminatorField.name}.GetLengthInBits(ctx);
				</#if>
				<#break>
			<#case "enum">
				<#assign enumField = field.asEnumField().orElseThrow()>

	// Enum Field (${enumField.name})
	lengthInBits += ${helper.getEnumBaseTypeReference(enumField.type).sizeInBits}
				<#break>
			<#case "implicit">
				<#assign implicitField = field.asImplicitField().orElseThrow()>
				<#assign simpleTypeReference = implicitField.type>

	// Implicit Field (${implicitField.name})
	lengthInBits += ${simpleTypeReference.asSimpleTypeReference().orElseThrow().sizeInBits}
				<#break>
			<#case "manualArray">
				<#assign manualArrayField = field.asManualArrayField().orElseThrow()>
	            <#assign arrayElementType = manualArrayField.type.elementTypeReference>

	// Manual Array Field (${manualArrayField.name})
	lengthInBits += uint16(${helper.toParseExpression(manualArrayField, arrayElementType, manualArrayField.lengthExpression, parserArguments)})
				<#break>
			<#case "manual">
				<#assign manualField = field.asManualField().orElseThrow()>

	// Manual Field (${manualField.name})
	lengthInBits += uint16(${helper.toParseExpression(manualField, manualField.type, manualField.lengthExpression, parserArguments)})
				<#break>
			<#case "optional">
				<#assign optionalField = field.asOptionalField().orElseThrow()>

	// Optional Field (${optionalField.name})
	if m.${optionalField.name?cap_first} != nil {
				<#if optionalField.type.isSimpleTypeReference()>
					<#assign simpleTypeReference = optionalField.type.asSimpleTypeReference().orElseThrow()>
		lengthInBits += ${simpleTypeReference.sizeInBits}
				<#elseif helper.isEnumField(field)>
		lengthInBits += ${helper.getEnumBaseTypeReference(optionalField.type).sizeInBits}
                <#elseif optionalField.type.isComplexTypeReference()>
		lengthInBits += m.${optionalField.name?cap_first}.GetLengthInBits(ctx)
                <#else>
		lengthInBits += (*m.${optionalField.name?cap_first}).GetLengthInBits(ctx)
				</#if>
	}
				<#break>
			<#case "padding">
				<#assign paddingField = field.asPaddingField().orElseThrow()>
				<#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

	// Padding Field (padding)
	_timesPadding := uint8(${helper.toSerializationExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)})
	for ;_timesPadding > 0; _timesPadding-- {
		lengthInBits += ${simpleTypeReference.sizeInBits}
	}
				<#break>
			<#case "reserved">
				<#assign reservedField = field.asReservedField().orElseThrow()>
				<#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

	// Reserved Field (reserved)
	lengthInBits += ${simpleTypeReference.sizeInBits}
				<#break>
			<#case "simple">
				<#assign simpleField = field.asSimpleField().orElseThrow()>

	// Simple field (${simpleField.name})
				<#if simpleField.type.isSimpleTypeReference()>
					<#if simpleField.type.isVstringTypeReference()>
						<#assign vstringTypeReference = simpleField.type.asVstringTypeReference().orElseThrow()>
	lengthInBits += uint16(${helper.toSerializationExpression(simpleField, helper.intTypeReference, vstringTypeReference.lengthExpression, parserArguments)})
					<#else>
						<#assign simpleTypeReference = simpleField.type.asSimpleTypeReference().orElseThrow()>
	lengthInBits += ${simpleTypeReference.sizeInBits};
					</#if>
				<#elseif helper.isEnumField(field)>
	lengthInBits += ${helper.getEnumBaseTypeReference(simpleField.type).sizeInBits}
				<#else>
	lengthInBits += m.${simpleField.name?cap_first}.GetLengthInBits(ctx)
				</#if>
				<#break>
			<#case "unknown">
				<#assign unknownField = field.asUnknownField().orElseThrow()>
			<#assign simpleTypeReference = unknownField.type.asSimpleTypeReference().orElseThrow()>

	// Unknown field
	lengthInBits += ${simpleTypeReference.sizeInBits}

				<#break>
			<#case "virtual">
				<#assign virtualField = field.asVirtualField().orElseThrow()>

	// A virtual field doesn't have any in- or output.
				<#break>
		</#switch>
	</#list>

	return lengthInBits
}
</#if>

func (m *_${type.name}) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

<#assign hasParserArguments=parserArguments?has_content/>
<#assign parserArgumentList><#if hasParserArguments><#list parserArguments as parserArgument>${parserArgument.name} ${helper.getLanguageTypeNameForTypeReference(parserArgument.type)}<#sep>, </#sep></#list></#if></#assign>
<#assign parserArgumentNameList><#if hasParserArguments><#list parserArguments as parserArgument>${parserArgument.name}<#sep>, </#sep></#list></#if></#assign>
func ${type.name}Parse(ctx context.Context, theBytes []byte<#if hasParserArguments>, ${parserArgumentList}</#if>) (${type.name}, error) {
	return ${type.name}ParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes${helper.getEndiannessOptions(true, true, parserArguments)})<#if hasParserArguments>, ${parserArgumentNameList}</#if>)
}

func ${type.name}ParseWithBufferProducer<#if type.isDiscriminatedParentTypeDefinition()>[T ${type.name}]</#if>(<#if hasParserArguments>${parserArgumentList}</#if>)  func(ctx context.Context, readBuffer utils.ReadBuffer) (<#if type.isDiscriminatedParentTypeDefinition()>T<#else>${type.name}</#if>, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (<#if type.isDiscriminatedParentTypeDefinition()>T<#else>${type.name}</#if>, error){
<#if type.isDiscriminatedParentTypeDefinition()>
	buffer, err := ${type.name}ParseWithBuffer(ctx , readBuffer<#if hasParserArguments>, ${parserArgumentNameList}</#if>)
	if err != nil {
		var zero T
		return zero,err
	}
	return buffer.(T), err
<#else>
	return ${type.name}ParseWithBuffer(ctx , readBuffer<#if hasParserArguments>, ${parserArgumentNameList}</#if>)
</#if>
	}
}

func ${type.name}ParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer<#if hasParserArguments>, ${parserArgumentList}</#if>) (${type.name}, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("${type.name}"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}
	currentPos := positionAware.GetPos()
	_ = currentPos
	<#if helper.requiresStartPos() || helper.requiresCurPos()>
	var startPos = positionAware.GetPos()
	_ = startPos
	</#if>
	<#assign reservedFieldIndex=0>
	<#list type.fields as field>
		<#switch field.typeName>
			<#case "array">${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/fields\"")}
				<#assign arrayField = field.asArrayField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>
				<#assign arrayElementTypeReference = arrayField.type.asArrayTypeReference().orElseThrow().getElementTypeReference()>

				<#if arrayElementTypeReference.isByteBased()>
					<#if !field.isCountArrayField() && !field.isLengthArrayField()>${helper.fail("array fields of type byte only support 'count' and 'length' loop-types.")}</#if>
	${namedField.name},err := readBuffer.ReadByteArray("${namedField.name}", int(${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)})
				<#else>
				<#-- If this is a count array, we can directly initialize an array with the given size -->
					<#if field.isCountArrayField()>
	${arrayField.name},err := ReadCountArrayField[${helper.getLanguageTypeNameForTypeReference(arrayElementTypeReference)}](ctx, "${arrayField.name}", ${helper.getDataReaderCall(arrayField.type)}, uint64(${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)})
					<#-- In all other cases do we have to work with a list, that is later converted to an array -->
					<#else>
					<#-- For a length array, we read data till the read position of the buffer reaches a given position -->
						<#if field.isLengthArrayField()>
	${arrayField.name},err := ReadLengthArrayField[${helper.getLanguageTypeNameForTypeReference(arrayElementTypeReference)}](ctx, "${arrayField.name}", ${helper.getDataReaderCall(arrayField.type)}, int(${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)})
						<#-- A terminated array keeps on reading data as long as the termination expression evaluates to false -->
						<#elseif field.isTerminatedArrayField()>
	${arrayField.name},err := ReadTerminatedArrayField[${helper.getLanguageTypeNameForTypeReference(arrayElementTypeReference)}](ctx, "${arrayField.name}", ${helper.getDataReaderCall(arrayField.type)}, ${helper.toParseExpression(arrayField, helper.intTypeReference, arrayField.loopExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)})
						</#if>
					</#if>
				</#if>
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "assert">
				<#assign assertField = field.asAssertField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name} := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}, ${helper.toParseExpression(assertField, assertField.type, assertField.conditionExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	_ = ${namedField.name}
				<#break>
			<#case "checksum">
				<#assign checksumField = field.asChecksumField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}, ${helper.toParseExpression(checksumField, checksumField.type, checksumField.checksumExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	_ = ${namedField.name}
			<#break>
			<#case "const">
				<#assign constField = field.asConstField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}, ${type.name}_${namedField.name?upper_case}${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	_ = ${namedField.name}
			<#break>
			<#case "discriminator">
				<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

				<#if typedField.type.isEnumTypeReference()>
	${namedField.name},err := ReadDiscriminatorEnumField[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", "${typedField.type.asEnumTypeReference().orElseThrow().typeDefinition.name}", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)})
				<#else>
	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)})
				</#if>
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "enum">
			<#case "enum">
				<#assign enumField = field.asEnumField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", "${enumField.type.asNonSimpleTypeReference().orElseThrow().typeDefinition.name}", ReadEnum[${helper.getLanguageTypeNameForField(field)},${helper.getLanguageTypeNameForTypeReference(helper.getEnumFieldSimpleTypeReference(enumField.type.asNonSimpleTypeReference().orElseThrow(), enumField.fieldName))}](${enumField.type.asNonSimpleTypeReference().orElseThrow().typeDefinition.name}FirstEnumForField${enumField.fieldName?cap_first}, ${helper.getDataReaderCall(helper.getEnumFieldTypeReference(enumField.type, enumField.fieldName))})${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "implicit">
				<#assign implicitField = field.asImplicitField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	_ = ${namedField.name}
				<#break>
			<#case "manualArray">${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/fields\"")}
				<#assign manualArrayField = field.asManualArrayField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>
				<#assign arrayElementTypeReference = manualArrayField.type.asArrayTypeReference().orElseThrow().getElementTypeReference()>

				<#if arrayElementTypeReference.isByteBased()>
	${namedField.name},err  := ReadManualByteArrayField(ctx, "${namedField.name}", readBuffer, ${helper.toParseExpression(manualArrayField, helper.boolTypeReference, manualArrayField.loopExpression, parserArguments)}, ${helper.toParseExpression(manualArrayField, manualArrayField.type, manualArrayField.parseExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)})
				<#else>
	${namedField.name},err := ReadManualArrayField[${helper.getLanguageTypeNameForTypeReference(arrayElementTypeReference)}](ctx, "${namedField.name}", readBuffer, ${helper.toParseExpression(manualArrayField, helper.boolTypeReference, manualArrayField.loopExpression, parserArguments)}, ${helper.toParseExpression(manualArrayField, manualArrayField.type, manualArrayField.parseExpression, parserArguments)}${helper.getFieldOptions(typedField, parserArguments)})
				</#if>
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "manual">${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/fields\"")}
				<#assign manualField = field.asManualField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${manualField.name},err := ReadManualField[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", readBuffer, EnsureType[${helper.getLanguageTypeNameForField(field)}](${helper.toParseExpression(manualField, manualField.type, manualField.parseExpression, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "optional">
				<#assign optionalField = field.asOptionalField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	<#if optionalField.type.isComplexTypeReference()>_</#if>${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}<#if optionalField.conditionExpression.present>, ${helper.toParseExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}<#else>, true</#if>${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	<#if optionalField.type.isComplexTypeReference()>
		var ${namedField.name} ${helper.getLanguageTypeNameForField(field)}
		if _${namedField.name}!=nil{
			${namedField.name}=*_${namedField.name}
		}
	</#if>
				<#break>
			<#case "padding">
				<#assign paddingField = field.asPaddingField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign simpleTypeReference = paddingField.type.asSimpleTypeReference().orElseThrow()>

	if err:= Read${field.typeName?cap_first}Field(ctx, ${helper.getDataReaderCall(typedField.type)}, (int) (${helper.toParseExpression(paddingField, paddingField.type, paddingField.paddingCondition, parserArguments)})${helper.getFieldOptions(typedField, parserArguments)}); err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing padding field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "reserved">
				<#assign reservedField = field.asReservedField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>

	reservedField${reservedFieldIndex}<#assign reservedFieldIndex=reservedFieldIndex+1>,err := Read${field.typeName?cap_first}Field(ctx, "reserved", ${helper.getDataReaderCall(typedField.type)}, ${helper.getReservedValue(reservedField)}${helper.getFieldOptions(typedField, parserArguments)})
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing reserved field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "simple">
				<#assign simpleField = field.asSimpleField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

<@compress single_line=true>
	${namedField.name},err  :=
	<#if typedField.type.isEnumTypeReference()>
		ReadEnumField[${helper.getLanguageTypeNameForField(field)}](
			ctx,
			"${namedField.name}",
			"${helper.getLanguageTypeNameForField(field)}",
			${helper.getDataReaderCall(typedField.type)}
			${helper.getFieldOptions(typedField, parserArguments)}
		)
	<#else>
		Read${field.typeName?cap_first}Field<#if typedField.getType().isComplexTypeReference()>[${helper.getLanguageTypeNameForField(field)}]</#if>(
			ctx,
			"${namedField.name}",
			${helper.getDataReaderCall(typedField.type)}
			${helper.getFieldOptions(typedField, parserArguments)}
		)
	</#if>
</@compress>

	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "switch">
				<#assign switchField = field.asSwitchField().orElseThrow()>

	// Switch Field (Depending on the discriminator values, passes the instantiation to a sub-type)
	type ${type.name}ChildSerializeRequirement interface {
		${type.name}
		InitializeParent(${type.name}<#if type.propertyFields?has_content>, </#if> <#list type.propertyFields as field><#if helper.needsPointerAccess(field)>*</#if>${helper.getLanguageTypeNameForField(field)}<#sep>, </#sep></#list>)
		GetParent() ${type.name}
	}
	var _childTemp any
	var _child ${type.name}ChildSerializeRequirement
	var typeSwitchError error
	switch {
				<#list switchField.cases as case>
					<@compress single_line=true>
						<#if case.discriminatorValueTerms?has_content>
							case
							<#list case.discriminatorValueTerms as discriminatorValueTerm>
								<#if helper.isWildcard(discriminatorValueTerm)> <#--TODO: we could use the above isWildcard as filter but then the switchField.discriminatorExpressions[discriminatorValueTerm?index] is offset. Solution would be to have it as a pair list-->
                                    ${discriminatorValueTerm?index}==${discriminatorValueTerm?index}
								<#else>
									<#assign discriminatorExpression=switchField.discriminatorExpressions[discriminatorValueTerm?index]>
									<#assign parsedDiscriminatorExpression=helper.toParseExpression(null, null, discriminatorExpression, parserArguments)>
									<#-- We remove debug informations as we need them for lookup-->
									<#assign parsedDiscriminatorExpression=tracer.removeTraces(parsedDiscriminatorExpression)>
									<#if helper.getDiscriminatorTypes()[parsedDiscriminatorExpression]??><#assign discriminatorType=helper.getDiscriminatorTypes()[parsedDiscriminatorExpression]></#if>
									${helper.toParseExpression(null, null, discriminatorExpression, parserArguments)} ==
									<#if discriminatorType?has_content && discriminatorType.isNonSimpleTypeReference()>
										<#if discriminatorType.isEnumTypeReference()>
											<#assign enumType=helper.getLanguageTypeNameForTypeReference(discriminatorType)>
											<#assign enumTypeWithoutTraces=tracer.removeTraces(enumType)>
											<#assign enumTypeTraces=tracer.extractTraces(enumType)>
											<#assign enumValue=helper.toParseExpression(null, discriminatorType,discriminatorValueTerm, parserArguments)>
											<#assign enumValueWithoutTraces=tracer.removeTraces(enumValue)>
											<#assign enumValueTraces=tracer.extractTraces(enumValue)>
											${enumTypeTraces}${enumValueTraces}${enumTypeWithoutTraces}_${enumValueWithoutTraces?replace("Get","")?replace("()","")}
										<#else>
											${helper.toParseExpression(null, discriminatorType,discriminatorValueTerm, parserArguments)}
										</#if>
									<#else>
										${helper.toParseExpression(null, discriminatorType,discriminatorValueTerm, parserArguments)}
									</#if>
								</#if>
								<#sep> && </#sep>
							</#list>
						<#else>
							<#assign defaultCaseOutput=true>
							case true
						</#if>: // ${case.name}
                    </@compress>

		_childTemp, typeSwitchError = ${case.name}ParseWithBuffer(ctx, readBuffer<#if case.allParserArguments.isPresent()>, <#list case.allParserArguments.orElseThrow() as parserArgument><#if <#--TODO: here DF1ResponseMessage throws a payloadLength not present: meaning that some feature is not rightfully implemented as the result should be a error not a missing pointer-->type.getPropertyFieldFromThisOrParentByName(parserArgument.name).isPresent() && type.getPropertyFieldFromThisOrParentByName(parserArgument.name).orElseThrow().isOptionalField()>*</#if>${parserArgument.name}<#sep>, </#sep></#list></#if>)
				</#list>
	default:
		typeSwitchError = errors.Errorf("Unmapped type for<#if switchField.getDiscriminatorExpressions()?has_content> parameters [<#list switchField.getDiscriminatorExpressions() as discriminatorExpression>${discriminatorExpression.stringRepresentation()}=%v<#sep>, </#sep></#list>]</#if>"<#if switchField.getDiscriminatorExpressions()?has_content>, <#list switchField.getDiscriminatorExpressions() as discriminatorExpression>${helper.toParseExpression(null, null, discriminatorExpression, parserArguments)}<#sep>, </#sep></#list></#if>)<@emitImport import="github.com/pkg/errors" />
	}
	if typeSwitchError != nil {
		return nil, errors.Wrap(typeSwitchError, "Error parsing sub-type for type-switch of ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}
	_child = _childTemp.(${type.name}ChildSerializeRequirement)
				<#break>

			<#case "unknown">
				<#assign unknownField = field.asUnknownField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>

	if _, err := Read${field.typeName?cap_first}Field(ctx, "unknown", ${helper.getDataReaderCall(typedField.type)}${helper.getFieldOptions(typedField, parserArguments)}); err!=nil{
			return nil, errors.Wrap(_UnknownErr, "Error parsing unknown field of ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
			<#case "virtual">${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/fields\"")}
				<#assign virtualField = field.asVirtualField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", (*${helper.getLanguageTypeNameForField(field)})(nil), ${helper.toParseExpression(virtualField, virtualField.type, virtualField.valueExpression, parserArguments,true)}${helper.getFieldOptions(typedField, parserArguments)});
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
	_ = ${namedField.name}
				<#break>
            <#case "validation">
                <#assign validationField = field.asValidationField().orElseThrow()>

	// Validation
	if (!(${helper.toParseExpression(validationField, helper.boolTypeReference, validationField.getValidationExpression(), null)})) {
		<#assign errorType="ParseValidationError">
		<#if !validationField.shouldFail()><#assign errorType="ParseAssertError"></#if>
		return nil, errors.WithStack(utils.${errorType}{Message: ${validationField.getDescription().orElse("\"Validation failed\"")}})<@emitImport import="github.com/pkg/errors" />
	}
                <#break>
			<#case "peek">
				<#assign peekField = field.asPeekField().orElseThrow()>
				<#assign typedField = field.asTypedField().orElseThrow()>
				<#assign namedField = field.asNamedField().orElseThrow()>

	${namedField.name},err := Read${field.typeName?cap_first}Field[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}", ${helper.getDataReaderCall(typedField.type)}<#if peekField.offsetExpression.present>, ${helper.toParseExpression(peekField, helper.boolTypeReference, peekField.offsetExpression.get(), parserArguments)}<#else>, 0</#if>${helper.getFieldOptions(typedField, parserArguments)});
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing '${namedField.name}' field"))<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
		</#switch>
	</#list>

	if closeErr := readBuffer.CloseContext("${type.name}"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}

	<#if type.isDiscriminatedParentTypeDefinition()>
	// Finish initializing
		<@compress single_line=true>
	_child.InitializeParent(_child
			<#if type.propertyFields?has_content>, </#if>
			<#list type.propertyFields as field>
				${field.name}
				<#sep>, </#sep>
			</#list>
			)
		</@compress>

        <#list reservedFields as reservedField>
	_child.GetParent().(*_${type.name}).reservedField${reservedField?index} = reservedField${reservedField?index}
        </#list>
	return _child, nil
	<#elseif type.parentType.isPresent()>
	// Create a partially initialized instance
	_child := &_${type.name}{
		_${type.parentType.orElseThrow().name}: &_${type.parentType.orElseThrow().name}{
        <#if filteredParserArguments?has_content>
            <#list filteredParserArguments?filter(arg->type.getParentType().orElseThrow().isParserArgument(arg.name)) as arg>
			${arg.name?cap_first}: ${arg.name},
            </#list>
        </#if>
		},
		<#list type.propertyFields as field>
		${field.name?cap_first}: ${field.name},
		</#list>
        <#list reservedFields as reservedField>
		reservedField${reservedField?index}: reservedField${reservedField?index},
        </#list>
	}
	_child._${type.parentType.orElseThrow().name}._${type.parentType.orElseThrow().name}ChildRequirements = _child
	return _child, nil
	<#else>
	// Create the instance
	return &_${type.name}{
		<#if filteredParserArguments?has_content>
        	<#list filteredParserArguments as arg>
            ${arg.name?cap_first}: ${arg.name},
        	</#list>
		</#if>
		<#list type.propertyFields as field>
			${field.name?cap_first}: ${field.name},
		</#list>
		<#list reservedFields as reservedField>
			reservedField${reservedField?index}: reservedField${reservedField?index},
        </#list>
		}, nil
	</#if>
}

<#if type.isDiscriminatedParentTypeDefinition()>
func (pm *_${type.name}) SerializeParent(ctx context.Context, writeBuffer utils.WriteBuffer, child ${type.name}, serializeChildFunction func() error) error {
	// We redirect all calls through client as some methods are only implemented there
	m := child
	_ = m
<#else>
func (m *_${type.name}) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background())))${helper.getEndiannessOptions(false, true, parserArguments)})
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_${type.name}) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
</#if>
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	<#if helper.hasFieldOfType("unknown")>
	return errors.New("Unknown field not serializable")
	<#else>
		<#if !type.isDiscriminatedChildTypeDefinition()>
	if pushErr :=writeBuffer.PushContext("${type.name}"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}
		</#if>
		<#assign arraySizeInBytesHelpers=helper.requiresHelperFunctions("ARRAY_SIZE_IN_BYTES")>
		<#if arraySizeInBytesHelpers?has_content>
			<#list arraySizeInBytesHelpers?keys as key>
				<#assign typeName=arraySizeInBytesHelpers[key]>
	${key}ArraySizeInBytes := func(items ${typeName}) uint32 {
		var sizeInBytes uint32 = 0
		for _, v := range items {
			sizeInBytes += uint32(v.GetLengthInBytes(ctx))
		}
		return sizeInBytes
	}
			</#list>
		</#if>
		<#if type.isDiscriminatedChildTypeDefinition()>
	ser := func() error {
		if pushErr := writeBuffer.PushContext("${type.name}"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for ${type.name}")<@emitImport import="github.com/pkg/errors" />
		}
		</#if>
        <#assign reservedFieldIndex=0>
		<#list type.fields as field>
			<#switch field.typeName>
				<#case "array">${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/fields\"")}
					<#assign arrayField = field.asArrayField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<#if arrayField.type.elementTypeReference.isByteBased()>${helper.emitRequiredImportRaw(". \"github.com/apache/plc4x/plc4go/spi/codegen/io\"")}
					<@compress single_line=true>
	if err := WriteByteArrayField(ctx, "${namedField.name}", m.Get${namedField.name?cap_first}(),
						WriteByteArray(writeBuffer, 8)
						${helper.getFieldOptions(typedField, parserArguments)}); err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#elseif arrayField.type.elementTypeReference.isSimpleTypeReference()>
					<@compress single_line=true>
	if err := WriteSimpleTypeArrayField(ctx, "${namedField.name}", m.Get${namedField.name?cap_first}(),
						${helper.getDataWriterCall(arrayField.type.elementTypeReference, namedField.name)}
						${helper.getFieldOptions(typedField, parserArguments)}); err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#else>
					<@compress single_line=true>
	if err := WriteComplexTypeArrayField(ctx, "${namedField.name}", m.Get${namedField.name?cap_first}(),
						writeBuffer${helper.getFieldOptions(typedField, parserArguments)}); err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					</#if>
					<#break>
				<#case "checksum">
					<#assign checksumField = field.asChecksumField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := WriteChecksumField[${helper.getLanguageTypeNameForField(field)}](ctx, "${namedField.name}",
						${helper.toSerializationExpression(checksumField, checksumField.type, checksumField.checksumExpression, parserArguments)},
						${helper.getDataWriterCall(typedField.type, namedField.name)}
						${helper.getFieldOptions(typedField, parserArguments)});err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "const">
					<#assign constField = field.asConstField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := <#if typedField.type.isEnumTypeReference()>
					WriteConstField(ctx, "${constField.name}",
						${type.name}_${namedField.name?upper_case}.getValue(),
						${helper.getDataWriterCall(helper.getEnumBaseTypeReference(typedField.type), namedField.name)}
						${helper.getFieldOptions(typedField, parserArguments)})
				<#else>
					WriteConstField(ctx, "${constField.name}",
						${type.name}_${namedField.name?upper_case},
						${helper.getDataWriterCall(typedField.type, namedField.name)}
						${helper.getFieldOptions(typedField, parserArguments)})
				</#if>;err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
				<#case "discriminator">
					<#assign discriminatorField = field.asDiscriminatorField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := <#if typedField.type.isEnumTypeReference()>
						WriteDiscriminatorEnumField(ctx, "${namedField.name}",
							"${helper.getLanguageTypeNameForField(field)}",
							m.Get${discriminatorField.name?cap_first}(),
							${helper.getEnumDataWriterCall(typedField.type, namedField.name, "value")}
							${helper.getFieldOptions(typedField, parserArguments)})
				<#else>
						WriteDiscriminatorField(ctx, "${namedField.name}",
							m.Get${discriminatorField.name?cap_first}(),
							${helper.getDataWriterCall(typedField.type, namedField.name)}
							${helper.getFieldOptions(typedField, parserArguments)})
				</#if>
						;err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
				<#case "enum">
					<#assign enumField = field.asEnumField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := WriteEnumField(ctx, "${namedField.name}",
						"${helper.getLanguageTypeNameForField(field)}",
						m.Get${namedField.name?cap_first}(),
						${helper.getEnumDataWriterCall(typedField.type, namedField.name, enumField.fieldName)}
						${helper.getFieldOptions(typedField, parserArguments)});err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
				<#break>
				<#case "implicit">
					<#assign implicitField = field.asImplicitField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<#-- Implicit field values might be used in expressions, in order to avoid problems, we generate a temporary variable with the given name. -->
	${implicitField.name} := ${helper.getLanguageTypeNameForField(field)}(${helper.toSerializationExpression(implicitField, implicitField.type, implicitField.serializeExpression, parserArguments)});
	if err := WriteImplicitField(ctx, "${namedField.name}", ${implicitField.name}, ${helper.getDataWriterCall(typedField.type, namedField.name)}${helper.getFieldOptions(typedField, parserArguments)});err != nil{
		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "manualArray">
					<#assign manualArrayField = field.asManualArrayField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := WriteManualArrayField[${helper.getLanguageTypeNameForTypeReference(manualArrayField.type.elementTypeReference)}](
						ctx,
						"${namedField.name}",
						m.Get${namedField.name?cap_first}(),
						func(ctx context.Context, writeBuffer utils.WriteBuffer,m ${helper.getLanguageTypeNameForTypeReference(manualArrayField.type.elementTypeReference)}) error {
						  return ${helper.toSerializationExpression(manualArrayField, manualArrayField.type.elementTypeReference, manualArrayField.serializeExpression, parserArguments)}
						},
						writeBuffer${helper.getFieldOptions(typedField, parserArguments)}); err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "manual">
					<#assign manualField = field.asManualField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err := WriteManualField[${helper.getLanguageTypeNameForField(typedField)}](
						ctx,
						"${namedField.name}",
						func(ctx context.Context) error {
							return ${helper.toSerializationExpression(manualField, typedField.type, manualField.serializeExpression, parserArguments)}
						},
						writeBuffer${helper.getFieldOptions(typedField, parserArguments)}); err != nil{
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "optional">
					<#assign optionalField = field.asOptionalField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>
					<#assign namedField = field.asNamedField().orElseThrow()>

					<@compress single_line=true>
	if err :=
					<#if optionalField.type.isEnumTypeReference()>
	WriteOptionalEnumField[${helper.getLanguageTypeNameForField(field)}](
						ctx,
						"${optionalField.name}",
						"${helper.getLanguageTypeNameForField(field)}",
						<#if typedField.type.isComplexTypeReference()>GetRef(</#if>m.Get${optionalField.name?cap_first}()<#if typedField.type.isComplexTypeReference()>)</#if>,
						${helper.getEnumDataWriterCall(optionalField.type, optionalField.name, "value")}
						<#if optionalField.conditionExpression.present>
							, ${helper.toSerializationExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}
						</#if>
						${helper.getFieldOptions(typedField, parserArguments)}
					)
					<#elseif optionalField.type.isDataIoTypeReference()>
	WriteOptionalField(
						ctx,
						"${optionalField.name}",
						<#if typedField.type.isComplexTypeReference()>GetRef(</#if>m.Get${optionalField.name?cap_first}()<#if typedField.type.isComplexTypeReference()>)</#if>,
						WriteDataIO(writeBuffer,
							func (wb utils.WriteBuffer, val any) error {
						return ${optionalField.type.asComplexTypeReference().orElseThrow().name}.
								StaticSerialize(wb, val
						<#if optionalField.type.asComplexTypeReference().orElseThrow().params?has_content>
							,
							<#list optionalField.type.asComplexTypeReference().orElseThrow().params.orElseThrow() as param>
								${helper.toParseExpression(optionalField, helper.anyTypeReference, param, parserArguments)}
								<#sep>, </#sep>
							</#list>
						</#if>
						}
							)
						)
						<#if optionalField.conditionExpression.present>
							,
							${helper.toSerializationExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}
						</#if>
						${helper.getFieldOptions(typedField, parserArguments)})
					<#else>
	WriteOptionalField[${helper.getLanguageTypeNameForField(field)}](
						ctx,
						"${optionalField.name}",
						<#if typedField.type.isComplexTypeReference()>GetRef(</#if>m.Get${optionalField.name?cap_first}()<#if typedField.type.isComplexTypeReference()>)</#if>,
						${helper.getDataWriterCall(typedField.type, optionalField.name)},
						<#if helper.isGeneratePropertiesForParserArguments() && optionalField.conditionExpression.present>
							${helper.toSerializationExpression(optionalField, helper.boolTypeReference, optionalField.conditionExpression.get(), parserArguments)}
						<#else>
							true
						</#if>
						${helper.getFieldOptions(typedField, parserArguments)})
					</#if>
						;err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "padding">
					<#assign paddingField = field.asPaddingField().orElseThrow()>
					<#assign typedField = field.asTypedField().orElseThrow()>

					<@compress single_line=true>
	if err := WritePaddingField[${helper.getLanguageTypeNameForField(paddingField)}](
						ctx,
						"padding",
						int(${helper.toSerializationExpression(paddingField, helper.intTypeReference, paddingField.paddingCondition, parserArguments)}),
						${helper.getLanguageTypeNameForField(field)}(${helper.toSerializationExpression(paddingField, paddingField.type, paddingField.paddingValue, parserArguments)}),
						${helper.getDataWriterCall(typedField.type, "padding")}${helper.getFieldOptions(typedField, parserArguments)}
						); err != nil {
					</@compress>

		return errors.Wrap(err, "Error serializing 'padding' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "reserved">
					<#assign reservedField = field.asReservedField().orElseThrow()>
					<#assign simpleTypeReference = reservedField.type.asSimpleTypeReference().orElseThrow()>

	// Reserved Field (reserved)
	{
		var reserved ${helper.getLanguageTypeNameForTypeReference(simpleTypeReference)} = ${helper.getReservedValue(reservedField)}
		if <#if type.isAbstract()>p</#if>m.reservedField${reservedFieldIndex} != nil {
			log.Info().Fields(map[string]any{
				"expected value": ${helper.getReservedValue(reservedField)},
				"got value": reserved,
			}).Msg("Overriding reserved field with unexpected value.")
			reserved = *<#if type.isAbstract()>p</#if>m.reservedField${reservedFieldIndex}
		}<#assign reservedFieldIndex=reservedFieldIndex+1>
		_err := ${helper.getWriteBufferWriteMethodCall("reserved", simpleTypeReference, "reserved", reservedField)}
		if _err != nil {
			return errors.Wrap(_err, "Error serializing 'reserved' field")<@emitImport import="github.com/pkg/errors" />
		}
	}
					<#break>
				<#case "simple">
					<#assign simpleField = field.asSimpleField().orElseThrow()>

	// Simple Field (${simpleField.name})
					<#if simpleField.type.isSimpleTypeReference()>
						<#assign simpleTypeReference = simpleField.type.asSimpleTypeReference().orElseThrow()>
						<#assign simpleFieldLogicalName><#if simpleField.type.isSimpleTypeReference() && !helper.isEnumField(field)>${simpleField.name}<#else>${simpleField.typeName}</#if></#assign>
	${simpleField.name} := ${helper.getLanguageTypeNameForField(field)}(m.Get${simpleField.name?cap_first}())
						<#if helper.isEnumField(field)>
	_${simpleField.name}Err := ${helper.getWriteBufferWriteMethodCall(simpleFieldLogicalName, simpleTypeReference, "(" + simpleField.name + ")", simpleField, "utils.WithAdditionalStringRepresentation(m.Get${simpleField.name?cap_first}().PLC4XEnumName())")}
						<#else>
	_${simpleField.name}Err := ${helper.getWriteBufferWriteMethodCall(simpleFieldLogicalName, simpleTypeReference, "(" + simpleField.name + ")", simpleField)}
						</#if>
					<#else>
						<#assign complexTypeReference = simpleField.type>
	if pushErr := writeBuffer.PushContext("${simpleField.name}"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for ${simpleField.name}")<@emitImport import="github.com/pkg/errors" />
	}
	_${simpleField.name}Err := writeBuffer.WriteSerializable(ctx, m.Get${simpleField.name?cap_first}())
	if popErr := writeBuffer.PopContext("${simpleField.name}"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for ${simpleField.name}")<@emitImport import="github.com/pkg/errors" />
	}
					</#if>
	if _${simpleField.name}Err != nil {
		return errors.Wrap(_${simpleField.name}Err, "Error serializing '${simpleField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "switch">
					<#assign switchField = field.asSwitchField().orElseThrow()>

	// Switch field (Depending on the discriminator values, passes the serialization to a sub-type)
	if _typeSwitchErr := serializeChildFunction(); _typeSwitchErr != nil {
		return errors.Wrap(_typeSwitchErr, "Error serializing sub-type field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
				<#case "virtual">
                	<#assign virtualField = field.asVirtualField().orElseThrow()>
                	<#assign typedField = field.asTypedField().orElseThrow()>
                	<#assign namedField = field.asNamedField().orElseThrow()>
	// Virtual field
	${namedField.name} := m.Get${namedField.name?cap_first}()
	_ =	${namedField.name}
	if _${namedField.name}Err := writeBuffer.WriteVirtual(ctx, "${namedField.name}", m.Get${namedField.name?cap_first}()); _${namedField.name}Err != nil {
		return errors.Wrap(_${namedField.name}Err, "Error serializing '${namedField.name}' field")<@emitImport import="github.com/pkg/errors" />
	}
					<#break>
			</#switch>
		</#list>

		<#if type.isDiscriminatedChildTypeDefinition()>
		if popErr := writeBuffer.PopContext("${type.name}"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for ${type.name}")<@emitImport import="github.com/pkg/errors" />
		}
		return nil
	}
	return m.SerializeParent(ctx, writeBuffer, m, ser)
		<#else>
	if popErr := writeBuffer.PopContext("${type.name}"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for ${type.name}")<@emitImport import="github.com/pkg/errors" />
	}
	return nil
		</#if>
	</#if>
}

<#if filteredParserArgumentsLocalToType?has_content>

////
// Arguments Getter

    <#list filteredParserArgumentsLocalToType as parserArgument>
func (m *_${type.name}) Get${parserArgument.name?cap_first}() ${helper.getLanguageTypeNameForTypeReference(parserArgument.type)} {
	return m.${parserArgument.name?cap_first}
}
    </#list>
//
////
</#if>

func (m *_${type.name}) is${type.name}() bool {
	return true
}

func (m *_${type.name}) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}

</@importSectionWithContentBelow>

</#outputformat>
