/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/plc4go/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetConstructedDataLifeSafetyAlarmValuesEntry is the data-structure of this message
type BACnetConstructedDataLifeSafetyAlarmValuesEntry struct {
	RawData *BACnetApplicationTagEnumerated
}

// IBACnetConstructedDataLifeSafetyAlarmValuesEntry is the corresponding interface of BACnetConstructedDataLifeSafetyAlarmValuesEntry
type IBACnetConstructedDataLifeSafetyAlarmValuesEntry interface {
	// GetRawData returns RawData (property field)
	GetRawData() *BACnetApplicationTagEnumerated
	// GetIsLifeSafetyStateProprietary returns IsLifeSafetyStateProprietary (virtual field)
	GetIsLifeSafetyStateProprietary() bool
	// GetLifeSafetyState returns LifeSafetyState (virtual field)
	GetLifeSafetyState() BACnetLifeSafetyState
	// GetLifeSafetyStateProprietary returns LifeSafetyStateProprietary (virtual field)
	GetLifeSafetyStateProprietary() uint16
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetConstructedDataLifeSafetyAlarmValuesEntry) GetRawData() *BACnetApplicationTagEnumerated {
	return m.RawData
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *BACnetConstructedDataLifeSafetyAlarmValuesEntry) GetIsLifeSafetyStateProprietary() bool {
	rawData := m.RawData
	_ = rawData
	return bool(bool(((*m.GetRawData()).GetActualValue()) > (255)))
}

func (m *BACnetConstructedDataLifeSafetyAlarmValuesEntry) GetLifeSafetyState() BACnetLifeSafetyState {
	rawData := m.RawData
	_ = rawData
	return BACnetLifeSafetyState(MapBACnetLifeSafetyState((*m.GetRawData()), m.GetIsLifeSafetyStateProprietary()))
}

func (m *BACnetConstructedDataLifeSafetyAlarmValuesEntry) GetLifeSafetyStateProprietary() uint16 {
	rawData := m.RawData
	_ = rawData
	return uint16(utils.InlineIf(m.GetIsLifeSafetyStateProprietary(), func() interface{} { return uint16((*m.GetRawData()).GetActualValue()) }, func() interface{} { return uint16(uint16(0)) }).(uint16))
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetConstructedDataLifeSafetyAlarmValuesEntry factory function for BACnetConstructedDataLifeSafetyAlarmValuesEntry
func NewBACnetConstructedDataLifeSafetyAlarmValuesEntry(rawData *BACnetApplicationTagEnumerated) *BACnetConstructedDataLifeSafetyAlarmValuesEntry {
	return &BACnetConstructedDataLifeSafetyAlarmValuesEntry{RawData: rawData}
}

func CastBACnetConstructedDataLifeSafetyAlarmValuesEntry(structType interface{}) *BACnetConstructedDataLifeSafetyAlarmValuesEntry {
	if casted, ok := structType.(BACnetConstructedDataLifeSafetyAlarmValuesEntry); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetConstructedDataLifeSafetyAlarmValuesEntry); ok {
		return casted
	}
	return nil
}

func (m *BACnetConstructedDataLifeSafetyAlarmValuesEntry) GetTypeName() string {
	return "BACnetConstructedDataLifeSafetyAlarmValuesEntry"
}

func (m *BACnetConstructedDataLifeSafetyAlarmValuesEntry) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetConstructedDataLifeSafetyAlarmValuesEntry) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Optional Field (rawData)
	if m.RawData != nil {
		lengthInBits += (*m.RawData).GetLengthInBits()
	}

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	// A virtual field doesn't have any in- or output.

	return lengthInBits
}

func (m *BACnetConstructedDataLifeSafetyAlarmValuesEntry) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetConstructedDataLifeSafetyAlarmValuesEntryParse(readBuffer utils.ReadBuffer) (*BACnetConstructedDataLifeSafetyAlarmValuesEntry, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetConstructedDataLifeSafetyAlarmValuesEntry"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Optional Field (rawData) (Can be skipped, if a given expression evaluates to false)
	var rawData *BACnetApplicationTagEnumerated = nil
	{
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("rawData"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetApplicationTagParse(readBuffer)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'rawData' field")
		default:
			rawData = CastBACnetApplicationTagEnumerated(_val)
			if closeErr := readBuffer.CloseContext("rawData"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Virtual field
	_isLifeSafetyStateProprietary := bool(((*rawData).GetActualValue()) > (255))
	isLifeSafetyStateProprietary := bool(_isLifeSafetyStateProprietary)
	_ = isLifeSafetyStateProprietary

	// Virtual field
	_lifeSafetyState := MapBACnetLifeSafetyState((*rawData), isLifeSafetyStateProprietary)
	lifeSafetyState := BACnetLifeSafetyState(_lifeSafetyState)
	_ = lifeSafetyState

	// Virtual field
	_lifeSafetyStateProprietary := utils.InlineIf(isLifeSafetyStateProprietary, func() interface{} { return uint16((*rawData).GetActualValue()) }, func() interface{} { return uint16(uint16(0)) }).(uint16)
	lifeSafetyStateProprietary := uint16(_lifeSafetyStateProprietary)
	_ = lifeSafetyStateProprietary

	if closeErr := readBuffer.CloseContext("BACnetConstructedDataLifeSafetyAlarmValuesEntry"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetConstructedDataLifeSafetyAlarmValuesEntry(rawData), nil
}

func (m *BACnetConstructedDataLifeSafetyAlarmValuesEntry) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetConstructedDataLifeSafetyAlarmValuesEntry"); pushErr != nil {
		return pushErr
	}

	// Optional Field (rawData) (Can be skipped, if the value is null)
	var rawData *BACnetApplicationTagEnumerated = nil
	if m.RawData != nil {
		if pushErr := writeBuffer.PushContext("rawData"); pushErr != nil {
			return pushErr
		}
		rawData = m.RawData
		_rawDataErr := rawData.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("rawData"); popErr != nil {
			return popErr
		}
		if _rawDataErr != nil {
			return errors.Wrap(_rawDataErr, "Error serializing 'rawData' field")
		}
	}
	// Virtual field
	if _isLifeSafetyStateProprietaryErr := writeBuffer.WriteVirtual("isLifeSafetyStateProprietary", m.GetIsLifeSafetyStateProprietary()); _isLifeSafetyStateProprietaryErr != nil {
		return errors.Wrap(_isLifeSafetyStateProprietaryErr, "Error serializing 'isLifeSafetyStateProprietary' field")
	}
	// Virtual field
	if _lifeSafetyStateErr := writeBuffer.WriteVirtual("lifeSafetyState", m.GetLifeSafetyState()); _lifeSafetyStateErr != nil {
		return errors.Wrap(_lifeSafetyStateErr, "Error serializing 'lifeSafetyState' field")
	}
	// Virtual field
	if _lifeSafetyStateProprietaryErr := writeBuffer.WriteVirtual("lifeSafetyStateProprietary", m.GetLifeSafetyStateProprietary()); _lifeSafetyStateProprietaryErr != nil {
		return errors.Wrap(_lifeSafetyStateProprietaryErr, "Error serializing 'lifeSafetyStateProprietary' field")
	}

	if popErr := writeBuffer.PopContext("BACnetConstructedDataLifeSafetyAlarmValuesEntry"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetConstructedDataLifeSafetyAlarmValuesEntry) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
