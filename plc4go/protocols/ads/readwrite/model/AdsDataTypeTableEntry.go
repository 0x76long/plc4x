/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model


import (
	"fmt"
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
)

	// Code generated by code-generation. DO NOT EDIT.


// Constant values.
const AdsDataTypeTableEntry_NAMETERMINATOR uint8 = 0x00
const AdsDataTypeTableEntry_TYPENAMETERMINATOR uint8 = 0x00
const AdsDataTypeTableEntry_COMMENTTERMINATOR uint8 = 0x00

// AdsDataTypeTableEntry is the corresponding interface of AdsDataTypeTableEntry
type AdsDataTypeTableEntry interface {
	utils.LengthAware
	utils.Serializable
	// GetEntryLength returns EntryLength (property field)
	GetEntryLength() uint32
	// GetVersion returns Version (property field)
	GetVersion() uint32
	// GetHashValue returns HashValue (property field)
	GetHashValue() uint32
	// GetTypeHashValue returns TypeHashValue (property field)
	GetTypeHashValue() uint32
	// GetSize returns Size (property field)
	GetSize() uint32
	// GetOffs returns Offs (property field)
	GetOffs() uint32
	// GetDataType returns DataType (property field)
	GetDataType() uint32
	// GetFlags returns Flags (property field)
	GetFlags() uint32
	// GetArrayDimensions returns ArrayDimensions (property field)
	GetArrayDimensions() uint16
	// GetNumChildren returns NumChildren (property field)
	GetNumChildren() uint16
	// GetName returns Name (property field)
	GetName() string
	// GetTypeName returns TypeName (property field)
	GetTypeName() string
	// GetComment returns Comment (property field)
	GetComment() string
	// GetArrayInfo returns ArrayInfo (property field)
	GetArrayInfo() []AdsDataTypeArrayInfo
	// GetChildren returns Children (property field)
	GetChildren() []AdsDataTypeTableEntry
	// GetRest returns Rest (property field)
	GetRest() []byte
}

// AdsDataTypeTableEntryExactly can be used when we want exactly this type and not a type which fulfills AdsDataTypeTableEntry.
// This is useful for switch cases.
type AdsDataTypeTableEntryExactly interface {
	AdsDataTypeTableEntry
	isAdsDataTypeTableEntry() bool
}

// _AdsDataTypeTableEntry is the data-structure of this message
type _AdsDataTypeTableEntry struct {
        EntryLength uint32
        Version uint32
        HashValue uint32
        TypeHashValue uint32
        Size uint32
        Offs uint32
        DataType uint32
        Flags uint32
        ArrayDimensions uint16
        NumChildren uint16
        Name string
        TypeName string
        Comment string
        ArrayInfo []AdsDataTypeArrayInfo
        Children []AdsDataTypeTableEntry
        Rest []byte
}


///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_AdsDataTypeTableEntry) GetEntryLength() uint32 {
	return m.EntryLength
}

func (m *_AdsDataTypeTableEntry) GetVersion() uint32 {
	return m.Version
}

func (m *_AdsDataTypeTableEntry) GetHashValue() uint32 {
	return m.HashValue
}

func (m *_AdsDataTypeTableEntry) GetTypeHashValue() uint32 {
	return m.TypeHashValue
}

func (m *_AdsDataTypeTableEntry) GetSize() uint32 {
	return m.Size
}

func (m *_AdsDataTypeTableEntry) GetOffs() uint32 {
	return m.Offs
}

func (m *_AdsDataTypeTableEntry) GetDataType() uint32 {
	return m.DataType
}

func (m *_AdsDataTypeTableEntry) GetFlags() uint32 {
	return m.Flags
}

func (m *_AdsDataTypeTableEntry) GetArrayDimensions() uint16 {
	return m.ArrayDimensions
}

func (m *_AdsDataTypeTableEntry) GetNumChildren() uint16 {
	return m.NumChildren
}

func (m *_AdsDataTypeTableEntry) GetName() string {
	return m.Name
}

func (m *_AdsDataTypeTableEntry) GetTypeName() string {
	return m.TypeName
}

func (m *_AdsDataTypeTableEntry) GetComment() string {
	return m.Comment
}

func (m *_AdsDataTypeTableEntry) GetArrayInfo() []AdsDataTypeArrayInfo {
	return m.ArrayInfo
}

func (m *_AdsDataTypeTableEntry) GetChildren() []AdsDataTypeTableEntry {
	return m.Children
}

func (m *_AdsDataTypeTableEntry) GetRest() []byte {
	return m.Rest
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for const fields.
///////////////////////

func (m *_AdsDataTypeTableEntry) GetNameTerminator() uint8 {
	return AdsDataTypeTableEntry_NAMETERMINATOR
}

func (m *_AdsDataTypeTableEntry) GetTypeNameTerminator() uint8 {
	return AdsDataTypeTableEntry_TYPENAMETERMINATOR
}

func (m *_AdsDataTypeTableEntry) GetCommentTerminator() uint8 {
	return AdsDataTypeTableEntry_COMMENTTERMINATOR
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////


// NewAdsDataTypeTableEntry factory function for _AdsDataTypeTableEntry
func NewAdsDataTypeTableEntry( entryLength uint32 , version uint32 , hashValue uint32 , typeHashValue uint32 , size uint32 , offs uint32 , dataType uint32 , flags uint32 , arrayDimensions uint16 , numChildren uint16 , name string , typeName string , comment string , arrayInfo []AdsDataTypeArrayInfo , children []AdsDataTypeTableEntry , rest []byte ) *_AdsDataTypeTableEntry {
return &_AdsDataTypeTableEntry{ EntryLength: entryLength , Version: version , HashValue: hashValue , TypeHashValue: typeHashValue , Size: size , Offs: offs , DataType: dataType , Flags: flags , ArrayDimensions: arrayDimensions , NumChildren: numChildren , Name: name , TypeName: typeName , Comment: comment , ArrayInfo: arrayInfo , Children: children , Rest: rest }
}

// Deprecated: use the interface for direct cast
func CastAdsDataTypeTableEntry(structType interface{}) AdsDataTypeTableEntry {
    if casted, ok := structType.(AdsDataTypeTableEntry); ok {
		return casted
	}
	if casted, ok := structType.(*AdsDataTypeTableEntry); ok {
		return *casted
	}
	return nil
}

func (m *_AdsDataTypeTableEntry) GetTypeName() string {
	return "AdsDataTypeTableEntry"
}

func (m *_AdsDataTypeTableEntry) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *_AdsDataTypeTableEntry) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (entryLength)
	lengthInBits += 32;

	// Simple field (version)
	lengthInBits += 32;

	// Simple field (hashValue)
	lengthInBits += 32;

	// Simple field (typeHashValue)
	lengthInBits += 32;

	// Simple field (size)
	lengthInBits += 32;

	// Simple field (offs)
	lengthInBits += 32;

	// Simple field (dataType)
	lengthInBits += 32;

	// Simple field (flags)
	lengthInBits += 32;

	// Implicit Field (nameLength)
	lengthInBits += 16

	// Implicit Field (typeNameLength)
	lengthInBits += 16

	// Implicit Field (commentLength)
	lengthInBits += 16

	// Simple field (arrayDimensions)
	lengthInBits += 16;

	// Simple field (numChildren)
	lengthInBits += 16;

	// Simple field (name)
	lengthInBits += uint16(int32(GetSTR_LEN()(m.GetName())) * int32(int32(8)))

	// Const Field (nameTerminator)
	lengthInBits += 8

	// Simple field (typeName)
	lengthInBits += uint16(int32(GetSTR_LEN()(m.GetTypeName())) * int32(int32(8)))

	// Const Field (typeNameTerminator)
	lengthInBits += 8

	// Simple field (comment)
	lengthInBits += uint16(int32(GetSTR_LEN()(m.GetComment())) * int32(int32(8)))

	// Const Field (commentTerminator)
	lengthInBits += 8

	// Array field
	if len(m.ArrayInfo) > 0 {
		for i, element := range m.ArrayInfo {
			last := i == len(m.ArrayInfo) -1
			lengthInBits += element.(interface{GetLengthInBitsConditional(bool) uint16}).GetLengthInBitsConditional(last)
		}
	}

	// Array field
	if len(m.Children) > 0 {
		for i, element := range m.Children {
			last := i == len(m.Children) -1
			lengthInBits += element.(interface{GetLengthInBitsConditional(bool) uint16}).GetLengthInBitsConditional(last)
		}
	}

	// Array field
	if len(m.Rest) > 0 {
		lengthInBits += 8 * uint16(len(m.Rest))
	}

	return lengthInBits
}


func (m *_AdsDataTypeTableEntry) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func AdsDataTypeTableEntryParse(readBuffer utils.ReadBuffer) (AdsDataTypeTableEntry, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("AdsDataTypeTableEntry"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for AdsDataTypeTableEntry")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos
	var startPos = positionAware.GetPos()
	var curPos uint16

	// Simple Field (entryLength)
_entryLength, _entryLengthErr := readBuffer.ReadUint32("entryLength", 32)
	if _entryLengthErr != nil {
		return nil, errors.Wrap(_entryLengthErr, "Error parsing 'entryLength' field of AdsDataTypeTableEntry")
	}
	entryLength := _entryLength

	// Simple Field (version)
_version, _versionErr := readBuffer.ReadUint32("version", 32)
	if _versionErr != nil {
		return nil, errors.Wrap(_versionErr, "Error parsing 'version' field of AdsDataTypeTableEntry")
	}
	version := _version

	// Simple Field (hashValue)
_hashValue, _hashValueErr := readBuffer.ReadUint32("hashValue", 32)
	if _hashValueErr != nil {
		return nil, errors.Wrap(_hashValueErr, "Error parsing 'hashValue' field of AdsDataTypeTableEntry")
	}
	hashValue := _hashValue

	// Simple Field (typeHashValue)
_typeHashValue, _typeHashValueErr := readBuffer.ReadUint32("typeHashValue", 32)
	if _typeHashValueErr != nil {
		return nil, errors.Wrap(_typeHashValueErr, "Error parsing 'typeHashValue' field of AdsDataTypeTableEntry")
	}
	typeHashValue := _typeHashValue

	// Simple Field (size)
_size, _sizeErr := readBuffer.ReadUint32("size", 32)
	if _sizeErr != nil {
		return nil, errors.Wrap(_sizeErr, "Error parsing 'size' field of AdsDataTypeTableEntry")
	}
	size := _size

	// Simple Field (offs)
_offs, _offsErr := readBuffer.ReadUint32("offs", 32)
	if _offsErr != nil {
		return nil, errors.Wrap(_offsErr, "Error parsing 'offs' field of AdsDataTypeTableEntry")
	}
	offs := _offs

	// Simple Field (dataType)
_dataType, _dataTypeErr := readBuffer.ReadUint32("dataType", 32)
	if _dataTypeErr != nil {
		return nil, errors.Wrap(_dataTypeErr, "Error parsing 'dataType' field of AdsDataTypeTableEntry")
	}
	dataType := _dataType

	// Simple Field (flags)
_flags, _flagsErr := readBuffer.ReadUint32("flags", 32)
	if _flagsErr != nil {
		return nil, errors.Wrap(_flagsErr, "Error parsing 'flags' field of AdsDataTypeTableEntry")
	}
	flags := _flags

	// Implicit Field (nameLength) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
	nameLength, _nameLengthErr := readBuffer.ReadUint16("nameLength", 16)
	_ = nameLength
	if _nameLengthErr != nil {
		return nil, errors.Wrap(_nameLengthErr, "Error parsing 'nameLength' field of AdsDataTypeTableEntry")
	}

	// Implicit Field (typeNameLength) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
	typeNameLength, _typeNameLengthErr := readBuffer.ReadUint16("typeNameLength", 16)
	_ = typeNameLength
	if _typeNameLengthErr != nil {
		return nil, errors.Wrap(_typeNameLengthErr, "Error parsing 'typeNameLength' field of AdsDataTypeTableEntry")
	}

	// Implicit Field (commentLength) (Used for parsing, but its value is not stored as it's implicitly given by the objects content)
	commentLength, _commentLengthErr := readBuffer.ReadUint16("commentLength", 16)
	_ = commentLength
	if _commentLengthErr != nil {
		return nil, errors.Wrap(_commentLengthErr, "Error parsing 'commentLength' field of AdsDataTypeTableEntry")
	}

	// Simple Field (arrayDimensions)
_arrayDimensions, _arrayDimensionsErr := readBuffer.ReadUint16("arrayDimensions", 16)
	if _arrayDimensionsErr != nil {
		return nil, errors.Wrap(_arrayDimensionsErr, "Error parsing 'arrayDimensions' field of AdsDataTypeTableEntry")
	}
	arrayDimensions := _arrayDimensions

	// Simple Field (numChildren)
_numChildren, _numChildrenErr := readBuffer.ReadUint16("numChildren", 16)
	if _numChildrenErr != nil {
		return nil, errors.Wrap(_numChildrenErr, "Error parsing 'numChildren' field of AdsDataTypeTableEntry")
	}
	numChildren := _numChildren

	// Simple Field (name)
_name, _nameErr := readBuffer.ReadString("name", uint32((nameLength) * ((8))))
	if _nameErr != nil {
		return nil, errors.Wrap(_nameErr, "Error parsing 'name' field of AdsDataTypeTableEntry")
	}
	name := _name

	// Const Field (nameTerminator)
	nameTerminator, _nameTerminatorErr := readBuffer.ReadUint8("nameTerminator", 8)
	if _nameTerminatorErr != nil {
		return nil, errors.Wrap(_nameTerminatorErr, "Error parsing 'nameTerminator' field of AdsDataTypeTableEntry")
	}
	if nameTerminator != AdsDataTypeTableEntry_NAMETERMINATOR {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", AdsDataTypeTableEntry_NAMETERMINATOR) + " but got " + fmt.Sprintf("%d", nameTerminator))
	}

	// Simple Field (typeName)
_typeName, _typeNameErr := readBuffer.ReadString("typeName", uint32((typeNameLength) * ((8))))
	if _typeNameErr != nil {
		return nil, errors.Wrap(_typeNameErr, "Error parsing 'typeName' field of AdsDataTypeTableEntry")
	}
	typeName := _typeName

	// Const Field (typeNameTerminator)
	typeNameTerminator, _typeNameTerminatorErr := readBuffer.ReadUint8("typeNameTerminator", 8)
	if _typeNameTerminatorErr != nil {
		return nil, errors.Wrap(_typeNameTerminatorErr, "Error parsing 'typeNameTerminator' field of AdsDataTypeTableEntry")
	}
	if typeNameTerminator != AdsDataTypeTableEntry_TYPENAMETERMINATOR {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", AdsDataTypeTableEntry_TYPENAMETERMINATOR) + " but got " + fmt.Sprintf("%d", typeNameTerminator))
	}

	// Simple Field (comment)
_comment, _commentErr := readBuffer.ReadString("comment", uint32((commentLength) * ((8))))
	if _commentErr != nil {
		return nil, errors.Wrap(_commentErr, "Error parsing 'comment' field of AdsDataTypeTableEntry")
	}
	comment := _comment

	// Const Field (commentTerminator)
	commentTerminator, _commentTerminatorErr := readBuffer.ReadUint8("commentTerminator", 8)
	if _commentTerminatorErr != nil {
		return nil, errors.Wrap(_commentTerminatorErr, "Error parsing 'commentTerminator' field of AdsDataTypeTableEntry")
	}
	if commentTerminator != AdsDataTypeTableEntry_COMMENTTERMINATOR {
		return nil, errors.New("Expected constant value " + fmt.Sprintf("%d", AdsDataTypeTableEntry_COMMENTTERMINATOR) + " but got " + fmt.Sprintf("%d", commentTerminator))
	}

	// Array field (arrayInfo)
	if pullErr := readBuffer.PullContext("arrayInfo", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for arrayInfo")
	}
	// Count array
	arrayInfo := make([]AdsDataTypeArrayInfo, arrayDimensions)
	// This happens when the size is set conditional to 0
	if len(arrayInfo) == 0 {
		arrayInfo = nil
	}
	{
		for curItem := uint16(0); curItem < uint16(arrayDimensions); curItem++ {
_item, _err := AdsDataTypeArrayInfoParse(readBuffer)
			if _err != nil {
				return nil, errors.Wrap(_err, "Error parsing 'arrayInfo' field of AdsDataTypeTableEntry")
			}
			arrayInfo[curItem] = _item.(AdsDataTypeArrayInfo)
		}
	}
	if closeErr := readBuffer.CloseContext("arrayInfo", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for arrayInfo")
	}

	// Array field (children)
	if pullErr := readBuffer.PullContext("children", utils.WithRenderAsList(true)); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for children")
	}
	// Count array
	children := make([]AdsDataTypeTableEntry, numChildren)
	// This happens when the size is set conditional to 0
	if len(children) == 0 {
		children = nil
	}
	{
		for curItem := uint16(0); curItem < uint16(numChildren); curItem++ {
_item, _err := AdsDataTypeTableEntryParse(readBuffer)
			if _err != nil {
				return nil, errors.Wrap(_err, "Error parsing 'children' field of AdsDataTypeTableEntry")
			}
			children[curItem] = _item.(AdsDataTypeTableEntry)
		}
	}
	if closeErr := readBuffer.CloseContext("children", utils.WithRenderAsList(true)); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for children")
	}
	// Byte Array field (rest)
	numberOfBytesrest := int(uint16(entryLength) - uint16(curPos))
	rest, _readArrayErr := readBuffer.ReadByteArray("rest", numberOfBytesrest)
	if _readArrayErr != nil {
		return nil, errors.Wrap(_readArrayErr, "Error parsing 'rest' field of AdsDataTypeTableEntry")
	}

	if closeErr := readBuffer.CloseContext("AdsDataTypeTableEntry"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for AdsDataTypeTableEntry")
	}

	// Create the instance
	return &_AdsDataTypeTableEntry{
			EntryLength: entryLength,
			Version: version,
			HashValue: hashValue,
			TypeHashValue: typeHashValue,
			Size: size,
			Offs: offs,
			DataType: dataType,
			Flags: flags,
			ArrayDimensions: arrayDimensions,
			NumChildren: numChildren,
			Name: name,
			TypeName: typeName,
			Comment: comment,
			ArrayInfo: arrayInfo,
			Children: children,
			Rest: rest,
		}, nil
}

func (m *_AdsDataTypeTableEntry) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr :=writeBuffer.PushContext("AdsDataTypeTableEntry"); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for AdsDataTypeTableEntry")
	}

	// Simple Field (entryLength)
	entryLength := uint32(m.GetEntryLength())
	_entryLengthErr := writeBuffer.WriteUint32("entryLength", 32, (entryLength))
	if _entryLengthErr != nil {
		return errors.Wrap(_entryLengthErr, "Error serializing 'entryLength' field")
	}

	// Simple Field (version)
	version := uint32(m.GetVersion())
	_versionErr := writeBuffer.WriteUint32("version", 32, (version))
	if _versionErr != nil {
		return errors.Wrap(_versionErr, "Error serializing 'version' field")
	}

	// Simple Field (hashValue)
	hashValue := uint32(m.GetHashValue())
	_hashValueErr := writeBuffer.WriteUint32("hashValue", 32, (hashValue))
	if _hashValueErr != nil {
		return errors.Wrap(_hashValueErr, "Error serializing 'hashValue' field")
	}

	// Simple Field (typeHashValue)
	typeHashValue := uint32(m.GetTypeHashValue())
	_typeHashValueErr := writeBuffer.WriteUint32("typeHashValue", 32, (typeHashValue))
	if _typeHashValueErr != nil {
		return errors.Wrap(_typeHashValueErr, "Error serializing 'typeHashValue' field")
	}

	// Simple Field (size)
	size := uint32(m.GetSize())
	_sizeErr := writeBuffer.WriteUint32("size", 32, (size))
	if _sizeErr != nil {
		return errors.Wrap(_sizeErr, "Error serializing 'size' field")
	}

	// Simple Field (offs)
	offs := uint32(m.GetOffs())
	_offsErr := writeBuffer.WriteUint32("offs", 32, (offs))
	if _offsErr != nil {
		return errors.Wrap(_offsErr, "Error serializing 'offs' field")
	}

	// Simple Field (dataType)
	dataType := uint32(m.GetDataType())
	_dataTypeErr := writeBuffer.WriteUint32("dataType", 32, (dataType))
	if _dataTypeErr != nil {
		return errors.Wrap(_dataTypeErr, "Error serializing 'dataType' field")
	}

	// Simple Field (flags)
	flags := uint32(m.GetFlags())
	_flagsErr := writeBuffer.WriteUint32("flags", 32, (flags))
	if _flagsErr != nil {
		return errors.Wrap(_flagsErr, "Error serializing 'flags' field")
	}

	// Implicit Field (nameLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	nameLength := uint16(GetSTR_LEN()(m.GetName()))
	_nameLengthErr := writeBuffer.WriteUint16("nameLength", 16, (nameLength))
	if _nameLengthErr != nil {
		return errors.Wrap(_nameLengthErr, "Error serializing 'nameLength' field")
	}

	// Implicit Field (typeNameLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	typeNameLength := uint16(GetSTR_LEN()(m.GetTypeName()))
	_typeNameLengthErr := writeBuffer.WriteUint16("typeNameLength", 16, (typeNameLength))
	if _typeNameLengthErr != nil {
		return errors.Wrap(_typeNameLengthErr, "Error serializing 'typeNameLength' field")
	}

	// Implicit Field (commentLength) (Used for parsing, but it's value is not stored as it's implicitly given by the objects content)
	commentLength := uint16(GetSTR_LEN()(m.GetComment()))
	_commentLengthErr := writeBuffer.WriteUint16("commentLength", 16, (commentLength))
	if _commentLengthErr != nil {
		return errors.Wrap(_commentLengthErr, "Error serializing 'commentLength' field")
	}

	// Simple Field (arrayDimensions)
	arrayDimensions := uint16(m.GetArrayDimensions())
	_arrayDimensionsErr := writeBuffer.WriteUint16("arrayDimensions", 16, (arrayDimensions))
	if _arrayDimensionsErr != nil {
		return errors.Wrap(_arrayDimensionsErr, "Error serializing 'arrayDimensions' field")
	}

	// Simple Field (numChildren)
	numChildren := uint16(m.GetNumChildren())
	_numChildrenErr := writeBuffer.WriteUint16("numChildren", 16, (numChildren))
	if _numChildrenErr != nil {
		return errors.Wrap(_numChildrenErr, "Error serializing 'numChildren' field")
	}

	// Simple Field (name)
	name := string(m.GetName())
	_nameErr := writeBuffer.WriteString("name", uint32((GetSTR_LEN()(m.GetName())) * ((8))), "UTF-8", (name))
	if _nameErr != nil {
		return errors.Wrap(_nameErr, "Error serializing 'name' field")
	}

	// Const Field (nameTerminator)
	_nameTerminatorErr := writeBuffer.WriteUint8("nameTerminator", 8, 0x00)
	if _nameTerminatorErr != nil {
		return errors.Wrap(_nameTerminatorErr, "Error serializing 'nameTerminator' field")
	}

	// Simple Field (typeName)
	typeName := string(m.GetTypeName())
	_typeNameErr := writeBuffer.WriteString("typeName", uint32((GetSTR_LEN()(m.GetTypeName())) * ((8))), "UTF-8", (typeName))
	if _typeNameErr != nil {
		return errors.Wrap(_typeNameErr, "Error serializing 'typeName' field")
	}

	// Const Field (typeNameTerminator)
	_typeNameTerminatorErr := writeBuffer.WriteUint8("typeNameTerminator", 8, 0x00)
	if _typeNameTerminatorErr != nil {
		return errors.Wrap(_typeNameTerminatorErr, "Error serializing 'typeNameTerminator' field")
	}

	// Simple Field (comment)
	comment := string(m.GetComment())
	_commentErr := writeBuffer.WriteString("comment", uint32((GetSTR_LEN()(m.GetComment())) * ((8))), "UTF-8", (comment))
	if _commentErr != nil {
		return errors.Wrap(_commentErr, "Error serializing 'comment' field")
	}

	// Const Field (commentTerminator)
	_commentTerminatorErr := writeBuffer.WriteUint8("commentTerminator", 8, 0x00)
	if _commentTerminatorErr != nil {
		return errors.Wrap(_commentTerminatorErr, "Error serializing 'commentTerminator' field")
	}

	// Array Field (arrayInfo)
	if pushErr := writeBuffer.PushContext("arrayInfo", utils.WithRenderAsList(true)); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for arrayInfo")
	}
	for _, _element := range m.GetArrayInfo() {
		_elementErr := writeBuffer.WriteSerializable(_element)
		if _elementErr != nil {
			return errors.Wrap(_elementErr, "Error serializing 'arrayInfo' field")
		}
	}
	if popErr := writeBuffer.PopContext("arrayInfo", utils.WithRenderAsList(true)); popErr != nil {
		return errors.Wrap(popErr, "Error popping for arrayInfo")
	}

	// Array Field (children)
	if pushErr := writeBuffer.PushContext("children", utils.WithRenderAsList(true)); pushErr != nil {
		return errors.Wrap(pushErr, "Error pushing for children")
	}
	for _, _element := range m.GetChildren() {
		_elementErr := writeBuffer.WriteSerializable(_element)
		if _elementErr != nil {
			return errors.Wrap(_elementErr, "Error serializing 'children' field")
		}
	}
	if popErr := writeBuffer.PopContext("children", utils.WithRenderAsList(true)); popErr != nil {
		return errors.Wrap(popErr, "Error popping for children")
	}

	// Array Field (rest)
	// Byte Array field (rest)
	if err := writeBuffer.WriteByteArray("rest", m.GetRest()); err != nil {
		return errors.Wrap(err, "Error serializing 'rest' field")
	}

	if popErr := writeBuffer.PopContext("AdsDataTypeTableEntry"); popErr != nil {
		return errors.Wrap(popErr, "Error popping for AdsDataTypeTableEntry")
	}
	return nil
}


func (m *_AdsDataTypeTableEntry) isAdsDataTypeTableEntry() bool {
	return true
}

func (m *_AdsDataTypeTableEntry) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}



