/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"github.com/apache/plc4x/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

// CIPClassID is an enum
type CIPClassID uint16

type ICIPClassID interface {
	utils.Serializable
}

const (
	CIPClassID_Identity          CIPClassID = 0x0001
	CIPClassID_MessageRouter     CIPClassID = 0x0002
	CIPClassID_ConnectionManager CIPClassID = 0x0006
)

var CIPClassIDValues []CIPClassID

func init() {
	_ = errors.New
	CIPClassIDValues = []CIPClassID{
		CIPClassID_Identity,
		CIPClassID_MessageRouter,
		CIPClassID_ConnectionManager,
	}
}

func CIPClassIDByValue(value uint16) (enum CIPClassID, ok bool) {
	switch value {
	case 0x0001:
		return CIPClassID_Identity, true
	case 0x0002:
		return CIPClassID_MessageRouter, true
	case 0x0006:
		return CIPClassID_ConnectionManager, true
	}
	return 0, false
}

func CIPClassIDByName(value string) (enum CIPClassID, ok bool) {
	switch value {
	case "Identity":
		return CIPClassID_Identity, true
	case "MessageRouter":
		return CIPClassID_MessageRouter, true
	case "ConnectionManager":
		return CIPClassID_ConnectionManager, true
	}
	return 0, false
}

func CIPClassIDKnows(value uint16) bool {
	for _, typeValue := range CIPClassIDValues {
		if uint16(typeValue) == value {
			return true
		}
	}
	return false
}

func CastCIPClassID(structType interface{}) CIPClassID {
	castFunc := func(typ interface{}) CIPClassID {
		if sCIPClassID, ok := typ.(CIPClassID); ok {
			return sCIPClassID
		}
		return 0
	}
	return castFunc(structType)
}

func (m CIPClassID) GetLengthInBits(ctx context.Context) uint16 {
	return 16
}

func (m CIPClassID) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func CIPClassIDParse(ctx context.Context, theBytes []byte) (CIPClassID, error) {
	return CIPClassIDParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes))
}

func CIPClassIDParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer) (CIPClassID, error) {
	val, err := readBuffer.ReadUint16("CIPClassID", 16)
	if err != nil {
		return 0, errors.Wrap(err, "error reading CIPClassID")
	}
	if enum, ok := CIPClassIDByValue(val); !ok {
		Plc4xModelLog.Debug().Msgf("no value %x found for RequestType", val)
		return CIPClassID(val), nil
	} else {
		return enum, nil
	}
}

func (e CIPClassID) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased()
	if err := e.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (e CIPClassID) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	return writeBuffer.WriteUint16("CIPClassID", 16, uint16(e), utils.WithAdditionalStringRepresentation(e.PLC4XEnumName()))
}

// PLC4XEnumName returns the name that is used in code to identify this enum
func (e CIPClassID) PLC4XEnumName() string {
	switch e {
	case CIPClassID_Identity:
		return "Identity"
	case CIPClassID_MessageRouter:
		return "MessageRouter"
	case CIPClassID_ConnectionManager:
		return "ConnectionManager"
	}
	return ""
}

func (e CIPClassID) String() string {
	return e.PLC4XEnumName()
}
