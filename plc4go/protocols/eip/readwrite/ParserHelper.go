/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package readwrite

import (
	"context"

	"github.com/apache/plc4x/plc4go/protocols/eip/readwrite/model"
	"github.com/apache/plc4x/plc4go/spi/utils"
	"github.com/pkg/errors"
)

// Code generated by code-generation. DO NOT EDIT.

type EipParserHelper struct {
}

func (m EipParserHelper) Parse(typeName string, arguments []string, io utils.ReadBuffer) (interface{}, error) {
	switch typeName {
	case "PathSegment":
		order, _ := model.IntegerEncodingByName(arguments[0])
		return model.PathSegmentParseWithBuffer(context.Background(), io, order)
	case "TransportType":
		order, _ := model.IntegerEncodingByName(arguments[0])
		return model.TransportTypeParseWithBuffer(context.Background(), io, order)
	case "PortSegmentType":
		order, _ := model.IntegerEncodingByName(arguments[0])
		return model.PortSegmentTypeParseWithBuffer(context.Background(), io, order)
	case "NetworkConnectionParameters":
		order, _ := model.IntegerEncodingByName(arguments[0])
		return model.NetworkConnectionParametersParseWithBuffer(context.Background(), io, order)
	case "TypeId":
		order, _ := model.IntegerEncodingByName(arguments[0])
		return model.TypeIdParseWithBuffer(context.Background(), io, order)
	case "InstanceSegment":
		order, _ := model.IntegerEncodingByName(arguments[0])
		return model.InstanceSegmentParseWithBuffer(context.Background(), io, order)
	case "CIPData":
		packetLength, err := utils.StrToUint16(arguments[0])
		if err != nil {
			return nil, errors.Wrap(err, "Error parsing")
		}
		return model.CIPDataParseWithBuffer(context.Background(), io, packetLength)
	case "ClassSegment":
		order, _ := model.IntegerEncodingByName(arguments[0])
		return model.ClassSegmentParseWithBuffer(context.Background(), io, order)
	case "EipPacket":
		order, _ := model.IntegerEncodingByName(arguments[0])
		response, err := utils.StrToBool(arguments[1])
		if err != nil {
			return nil, errors.Wrap(err, "Error parsing")
		}
		return model.EipPacketParseWithBuffer(context.Background(), io, order, response)
	case "CIPAttributes":
		packetLength, err := utils.StrToUint16(arguments[0])
		if err != nil {
			return nil, errors.Wrap(err, "Error parsing")
		}
		return model.CIPAttributesParseWithBuffer(context.Background(), io, packetLength)
	case "CipService":
		connected, err := utils.StrToBool(arguments[0])
		if err != nil {
			return nil, errors.Wrap(err, "Error parsing")
		}
		serviceLen, err := utils.StrToUint16(arguments[1])
		if err != nil {
			return nil, errors.Wrap(err, "Error parsing")
		}
		order, _ := model.IntegerEncodingByName(arguments[2])
		return model.CipServiceParseWithBuffer(context.Background(), io, connected, serviceLen, order)
	case "Services":
		servicesLen, err := utils.StrToUint16(arguments[0])
		if err != nil {
			return nil, errors.Wrap(err, "Error parsing")
		}
		order, _ := model.IntegerEncodingByName(arguments[1])
		return model.ServicesParseWithBuffer(context.Background(), io, servicesLen, order)
	case "LogicalSegmentType":
		order, _ := model.IntegerEncodingByName(arguments[0])
		return model.LogicalSegmentTypeParseWithBuffer(context.Background(), io, order)
	case "CIPDataConnected":
		packetLength, err := utils.StrToUint16(arguments[0])
		if err != nil {
			return nil, errors.Wrap(err, "Error parsing")
		}
		return model.CIPDataConnectedParseWithBuffer(context.Background(), io, packetLength)
	case "DataSegmentType":
		order, _ := model.IntegerEncodingByName(arguments[0])
		return model.DataSegmentTypeParseWithBuffer(context.Background(), io, order)
	}
	return nil, errors.Errorf("Unsupported type %s", typeName)
}
