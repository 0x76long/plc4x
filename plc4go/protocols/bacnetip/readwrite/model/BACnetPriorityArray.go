/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"github.com/apache/plc4x/plc4go/internal/spi/utils"
	"github.com/pkg/errors"
	"io"
)

// Code generated by code-generation. DO NOT EDIT.

// BACnetPriorityArray is the data-structure of this message
type BACnetPriorityArray struct {
	PriorityValue01 *BACnetPriorityValue
	PeekedTagHeader *BACnetTagHeader
	PriorityValue02 *BACnetPriorityValue
	PriorityValue03 *BACnetPriorityValue
	PriorityValue04 *BACnetPriorityValue
	PriorityValue05 *BACnetPriorityValue
	PriorityValue06 *BACnetPriorityValue
	PriorityValue07 *BACnetPriorityValue
	PriorityValue08 *BACnetPriorityValue
	PriorityValue09 *BACnetPriorityValue
	PriorityValue10 *BACnetPriorityValue
	PriorityValue11 *BACnetPriorityValue
	PriorityValue12 *BACnetPriorityValue
	PriorityValue13 *BACnetPriorityValue
	PriorityValue14 *BACnetPriorityValue
	PriorityValue15 *BACnetPriorityValue
	PriorityValue16 *BACnetPriorityValue

	// Arguments.
	ObjectType BACnetObjectType
}

// IBACnetPriorityArray is the corresponding interface of BACnetPriorityArray
type IBACnetPriorityArray interface {
	// GetPriorityValue01 returns PriorityValue01 (property field)
	GetPriorityValue01() *BACnetPriorityValue
	// GetPeekedTagHeader returns PeekedTagHeader (property field)
	GetPeekedTagHeader() *BACnetTagHeader
	// GetPriorityValue02 returns PriorityValue02 (property field)
	GetPriorityValue02() *BACnetPriorityValue
	// GetPriorityValue03 returns PriorityValue03 (property field)
	GetPriorityValue03() *BACnetPriorityValue
	// GetPriorityValue04 returns PriorityValue04 (property field)
	GetPriorityValue04() *BACnetPriorityValue
	// GetPriorityValue05 returns PriorityValue05 (property field)
	GetPriorityValue05() *BACnetPriorityValue
	// GetPriorityValue06 returns PriorityValue06 (property field)
	GetPriorityValue06() *BACnetPriorityValue
	// GetPriorityValue07 returns PriorityValue07 (property field)
	GetPriorityValue07() *BACnetPriorityValue
	// GetPriorityValue08 returns PriorityValue08 (property field)
	GetPriorityValue08() *BACnetPriorityValue
	// GetPriorityValue09 returns PriorityValue09 (property field)
	GetPriorityValue09() *BACnetPriorityValue
	// GetPriorityValue10 returns PriorityValue10 (property field)
	GetPriorityValue10() *BACnetPriorityValue
	// GetPriorityValue11 returns PriorityValue11 (property field)
	GetPriorityValue11() *BACnetPriorityValue
	// GetPriorityValue12 returns PriorityValue12 (property field)
	GetPriorityValue12() *BACnetPriorityValue
	// GetPriorityValue13 returns PriorityValue13 (property field)
	GetPriorityValue13() *BACnetPriorityValue
	// GetPriorityValue14 returns PriorityValue14 (property field)
	GetPriorityValue14() *BACnetPriorityValue
	// GetPriorityValue15 returns PriorityValue15 (property field)
	GetPriorityValue15() *BACnetPriorityValue
	// GetPriorityValue16 returns PriorityValue16 (property field)
	GetPriorityValue16() *BACnetPriorityValue
	// GetLikelyArrayAccessWhichIsNotImplemented returns LikelyArrayAccessWhichIsNotImplemented (virtual field)
	GetLikelyArrayAccessWhichIsNotImplemented() bool
	// GetLengthInBytes returns the length in bytes
	GetLengthInBytes() uint16
	// GetLengthInBits returns the length in bits
	GetLengthInBits() uint16
	// Serialize serializes this type
	Serialize(writeBuffer utils.WriteBuffer) error
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *BACnetPriorityArray) GetPriorityValue01() *BACnetPriorityValue {
	return m.PriorityValue01
}

func (m *BACnetPriorityArray) GetPeekedTagHeader() *BACnetTagHeader {
	return m.PeekedTagHeader
}

func (m *BACnetPriorityArray) GetPriorityValue02() *BACnetPriorityValue {
	return m.PriorityValue02
}

func (m *BACnetPriorityArray) GetPriorityValue03() *BACnetPriorityValue {
	return m.PriorityValue03
}

func (m *BACnetPriorityArray) GetPriorityValue04() *BACnetPriorityValue {
	return m.PriorityValue04
}

func (m *BACnetPriorityArray) GetPriorityValue05() *BACnetPriorityValue {
	return m.PriorityValue05
}

func (m *BACnetPriorityArray) GetPriorityValue06() *BACnetPriorityValue {
	return m.PriorityValue06
}

func (m *BACnetPriorityArray) GetPriorityValue07() *BACnetPriorityValue {
	return m.PriorityValue07
}

func (m *BACnetPriorityArray) GetPriorityValue08() *BACnetPriorityValue {
	return m.PriorityValue08
}

func (m *BACnetPriorityArray) GetPriorityValue09() *BACnetPriorityValue {
	return m.PriorityValue09
}

func (m *BACnetPriorityArray) GetPriorityValue10() *BACnetPriorityValue {
	return m.PriorityValue10
}

func (m *BACnetPriorityArray) GetPriorityValue11() *BACnetPriorityValue {
	return m.PriorityValue11
}

func (m *BACnetPriorityArray) GetPriorityValue12() *BACnetPriorityValue {
	return m.PriorityValue12
}

func (m *BACnetPriorityArray) GetPriorityValue13() *BACnetPriorityValue {
	return m.PriorityValue13
}

func (m *BACnetPriorityArray) GetPriorityValue14() *BACnetPriorityValue {
	return m.PriorityValue14
}

func (m *BACnetPriorityArray) GetPriorityValue15() *BACnetPriorityValue {
	return m.PriorityValue15
}

func (m *BACnetPriorityArray) GetPriorityValue16() *BACnetPriorityValue {
	return m.PriorityValue16
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for virtual fields.
///////////////////////

func (m *BACnetPriorityArray) GetLikelyArrayAccessWhichIsNotImplemented() bool {
	priorityValue02 := m.PriorityValue02
	_ = priorityValue02
	priorityValue03 := m.PriorityValue03
	_ = priorityValue03
	priorityValue04 := m.PriorityValue04
	_ = priorityValue04
	priorityValue05 := m.PriorityValue05
	_ = priorityValue05
	priorityValue06 := m.PriorityValue06
	_ = priorityValue06
	priorityValue07 := m.PriorityValue07
	_ = priorityValue07
	priorityValue08 := m.PriorityValue08
	_ = priorityValue08
	priorityValue09 := m.PriorityValue09
	_ = priorityValue09
	priorityValue10 := m.PriorityValue10
	_ = priorityValue10
	priorityValue11 := m.PriorityValue11
	_ = priorityValue11
	priorityValue12 := m.PriorityValue12
	_ = priorityValue12
	priorityValue13 := m.PriorityValue13
	_ = priorityValue13
	priorityValue14 := m.PriorityValue14
	_ = priorityValue14
	priorityValue15 := m.PriorityValue15
	_ = priorityValue15
	priorityValue16 := m.PriorityValue16
	_ = priorityValue16
	return bool(bool((m.GetPeekedTagHeader().GetLengthValueType()) == (0x7)))
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewBACnetPriorityArray factory function for BACnetPriorityArray
func NewBACnetPriorityArray(priorityValue01 *BACnetPriorityValue, peekedTagHeader *BACnetTagHeader, priorityValue02 *BACnetPriorityValue, priorityValue03 *BACnetPriorityValue, priorityValue04 *BACnetPriorityValue, priorityValue05 *BACnetPriorityValue, priorityValue06 *BACnetPriorityValue, priorityValue07 *BACnetPriorityValue, priorityValue08 *BACnetPriorityValue, priorityValue09 *BACnetPriorityValue, priorityValue10 *BACnetPriorityValue, priorityValue11 *BACnetPriorityValue, priorityValue12 *BACnetPriorityValue, priorityValue13 *BACnetPriorityValue, priorityValue14 *BACnetPriorityValue, priorityValue15 *BACnetPriorityValue, priorityValue16 *BACnetPriorityValue, objectType BACnetObjectType) *BACnetPriorityArray {
	return &BACnetPriorityArray{PriorityValue01: priorityValue01, PeekedTagHeader: peekedTagHeader, PriorityValue02: priorityValue02, PriorityValue03: priorityValue03, PriorityValue04: priorityValue04, PriorityValue05: priorityValue05, PriorityValue06: priorityValue06, PriorityValue07: priorityValue07, PriorityValue08: priorityValue08, PriorityValue09: priorityValue09, PriorityValue10: priorityValue10, PriorityValue11: priorityValue11, PriorityValue12: priorityValue12, PriorityValue13: priorityValue13, PriorityValue14: priorityValue14, PriorityValue15: priorityValue15, PriorityValue16: priorityValue16, ObjectType: objectType}
}

func CastBACnetPriorityArray(structType interface{}) *BACnetPriorityArray {
	if casted, ok := structType.(BACnetPriorityArray); ok {
		return &casted
	}
	if casted, ok := structType.(*BACnetPriorityArray); ok {
		return casted
	}
	return nil
}

func (m *BACnetPriorityArray) GetTypeName() string {
	return "BACnetPriorityArray"
}

func (m *BACnetPriorityArray) GetLengthInBits() uint16 {
	return m.GetLengthInBitsConditional(false)
}

func (m *BACnetPriorityArray) GetLengthInBitsConditional(lastItem bool) uint16 {
	lengthInBits := uint16(0)

	// Simple field (priorityValue01)
	lengthInBits += m.PriorityValue01.GetLengthInBits()

	// A virtual field doesn't have any in- or output.

	// Optional Field (priorityValue02)
	if m.PriorityValue02 != nil {
		lengthInBits += (*m.PriorityValue02).GetLengthInBits()
	}

	// Optional Field (priorityValue03)
	if m.PriorityValue03 != nil {
		lengthInBits += (*m.PriorityValue03).GetLengthInBits()
	}

	// Optional Field (priorityValue04)
	if m.PriorityValue04 != nil {
		lengthInBits += (*m.PriorityValue04).GetLengthInBits()
	}

	// Optional Field (priorityValue05)
	if m.PriorityValue05 != nil {
		lengthInBits += (*m.PriorityValue05).GetLengthInBits()
	}

	// Optional Field (priorityValue06)
	if m.PriorityValue06 != nil {
		lengthInBits += (*m.PriorityValue06).GetLengthInBits()
	}

	// Optional Field (priorityValue07)
	if m.PriorityValue07 != nil {
		lengthInBits += (*m.PriorityValue07).GetLengthInBits()
	}

	// Optional Field (priorityValue08)
	if m.PriorityValue08 != nil {
		lengthInBits += (*m.PriorityValue08).GetLengthInBits()
	}

	// Optional Field (priorityValue09)
	if m.PriorityValue09 != nil {
		lengthInBits += (*m.PriorityValue09).GetLengthInBits()
	}

	// Optional Field (priorityValue10)
	if m.PriorityValue10 != nil {
		lengthInBits += (*m.PriorityValue10).GetLengthInBits()
	}

	// Optional Field (priorityValue11)
	if m.PriorityValue11 != nil {
		lengthInBits += (*m.PriorityValue11).GetLengthInBits()
	}

	// Optional Field (priorityValue12)
	if m.PriorityValue12 != nil {
		lengthInBits += (*m.PriorityValue12).GetLengthInBits()
	}

	// Optional Field (priorityValue13)
	if m.PriorityValue13 != nil {
		lengthInBits += (*m.PriorityValue13).GetLengthInBits()
	}

	// Optional Field (priorityValue14)
	if m.PriorityValue14 != nil {
		lengthInBits += (*m.PriorityValue14).GetLengthInBits()
	}

	// Optional Field (priorityValue15)
	if m.PriorityValue15 != nil {
		lengthInBits += (*m.PriorityValue15).GetLengthInBits()
	}

	// Optional Field (priorityValue16)
	if m.PriorityValue16 != nil {
		lengthInBits += (*m.PriorityValue16).GetLengthInBits()
	}

	return lengthInBits
}

func (m *BACnetPriorityArray) GetLengthInBytes() uint16 {
	return m.GetLengthInBits() / 8
}

func BACnetPriorityArrayParse(readBuffer utils.ReadBuffer, objectType BACnetObjectType) (*BACnetPriorityArray, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("BACnetPriorityArray"); pullErr != nil {
		return nil, pullErr
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (priorityValue01)
	if pullErr := readBuffer.PullContext("priorityValue01"); pullErr != nil {
		return nil, pullErr
	}
	_priorityValue01, _priorityValue01Err := BACnetPriorityValueParse(readBuffer, BACnetObjectType(objectType))
	if _priorityValue01Err != nil {
		return nil, errors.Wrap(_priorityValue01Err, "Error parsing 'priorityValue01' field")
	}
	priorityValue01 := CastBACnetPriorityValue(_priorityValue01)
	if closeErr := readBuffer.CloseContext("priorityValue01"); closeErr != nil {
		return nil, closeErr
	}

	// Peek Field (peekedTagHeader)
	currentPos = positionAware.GetPos()
	if pullErr := readBuffer.PullContext("peekedTagHeader"); pullErr != nil {
		return nil, pullErr
	}
	peekedTagHeader, _ := BACnetTagHeaderParse(readBuffer)
	readBuffer.Reset(currentPos)

	// Virtual field
	_likelyArrayAccessWhichIsNotImplemented := bool((peekedTagHeader.GetLengthValueType()) == (0x7))
	likelyArrayAccessWhichIsNotImplemented := bool(_likelyArrayAccessWhichIsNotImplemented)
	_ = likelyArrayAccessWhichIsNotImplemented

	// Optional Field (priorityValue02) (Can be skipped, if a given expression evaluates to false)
	var priorityValue02 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue02"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue02' field")
		default:
			priorityValue02 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue02"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue03) (Can be skipped, if a given expression evaluates to false)
	var priorityValue03 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue03"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue03' field")
		default:
			priorityValue03 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue03"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue04) (Can be skipped, if a given expression evaluates to false)
	var priorityValue04 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue04"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue04' field")
		default:
			priorityValue04 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue04"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue05) (Can be skipped, if a given expression evaluates to false)
	var priorityValue05 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue05"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue05' field")
		default:
			priorityValue05 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue05"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue06) (Can be skipped, if a given expression evaluates to false)
	var priorityValue06 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue06"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue06' field")
		default:
			priorityValue06 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue06"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue07) (Can be skipped, if a given expression evaluates to false)
	var priorityValue07 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue07"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue07' field")
		default:
			priorityValue07 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue07"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue08) (Can be skipped, if a given expression evaluates to false)
	var priorityValue08 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue08"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue08' field")
		default:
			priorityValue08 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue08"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue09) (Can be skipped, if a given expression evaluates to false)
	var priorityValue09 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue09"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue09' field")
		default:
			priorityValue09 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue09"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue10) (Can be skipped, if a given expression evaluates to false)
	var priorityValue10 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue10"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue10' field")
		default:
			priorityValue10 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue10"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue11) (Can be skipped, if a given expression evaluates to false)
	var priorityValue11 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue11"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue11' field")
		default:
			priorityValue11 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue11"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue12) (Can be skipped, if a given expression evaluates to false)
	var priorityValue12 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue12"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue12' field")
		default:
			priorityValue12 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue12"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue13) (Can be skipped, if a given expression evaluates to false)
	var priorityValue13 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue13"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue13' field")
		default:
			priorityValue13 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue13"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue14) (Can be skipped, if a given expression evaluates to false)
	var priorityValue14 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue14"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue14' field")
		default:
			priorityValue14 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue14"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue15) (Can be skipped, if a given expression evaluates to false)
	var priorityValue15 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue15"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue15' field")
		default:
			priorityValue15 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue15"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	// Optional Field (priorityValue16) (Can be skipped, if a given expression evaluates to false)
	var priorityValue16 *BACnetPriorityValue = nil
	if !(likelyArrayAccessWhichIsNotImplemented) {
		currentPos = positionAware.GetPos()
		if pullErr := readBuffer.PullContext("priorityValue16"); pullErr != nil {
			return nil, pullErr
		}
		_val, _err := BACnetPriorityValueParse(readBuffer, objectType)
		switch {
		case errors.Is(_err, utils.ParseAssertError{}) || errors.Is(_err, io.EOF):
			readBuffer.Reset(currentPos)
		case _err != nil:
			return nil, errors.Wrap(_err, "Error parsing 'priorityValue16' field")
		default:
			priorityValue16 = CastBACnetPriorityValue(_val)
			if closeErr := readBuffer.CloseContext("priorityValue16"); closeErr != nil {
				return nil, closeErr
			}
		}
	}

	if closeErr := readBuffer.CloseContext("BACnetPriorityArray"); closeErr != nil {
		return nil, closeErr
	}

	// Create the instance
	return NewBACnetPriorityArray(priorityValue01, peekedTagHeader, priorityValue02, priorityValue03, priorityValue04, priorityValue05, priorityValue06, priorityValue07, priorityValue08, priorityValue09, priorityValue10, priorityValue11, priorityValue12, priorityValue13, priorityValue14, priorityValue15, priorityValue16, objectType), nil
}

func (m *BACnetPriorityArray) Serialize(writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	if pushErr := writeBuffer.PushContext("BACnetPriorityArray"); pushErr != nil {
		return pushErr
	}

	// Simple Field (priorityValue01)
	if pushErr := writeBuffer.PushContext("priorityValue01"); pushErr != nil {
		return pushErr
	}
	_priorityValue01Err := m.PriorityValue01.Serialize(writeBuffer)
	if popErr := writeBuffer.PopContext("priorityValue01"); popErr != nil {
		return popErr
	}
	if _priorityValue01Err != nil {
		return errors.Wrap(_priorityValue01Err, "Error serializing 'priorityValue01' field")
	}
	// Virtual field
	if _likelyArrayAccessWhichIsNotImplementedErr := writeBuffer.WriteVirtual("likelyArrayAccessWhichIsNotImplemented", m.GetLikelyArrayAccessWhichIsNotImplemented()); _likelyArrayAccessWhichIsNotImplementedErr != nil {
		return errors.Wrap(_likelyArrayAccessWhichIsNotImplementedErr, "Error serializing 'likelyArrayAccessWhichIsNotImplemented' field")
	}

	// Optional Field (priorityValue02) (Can be skipped, if the value is null)
	var priorityValue02 *BACnetPriorityValue = nil
	if m.PriorityValue02 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue02"); pushErr != nil {
			return pushErr
		}
		priorityValue02 = m.PriorityValue02
		_priorityValue02Err := priorityValue02.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue02"); popErr != nil {
			return popErr
		}
		if _priorityValue02Err != nil {
			return errors.Wrap(_priorityValue02Err, "Error serializing 'priorityValue02' field")
		}
	}

	// Optional Field (priorityValue03) (Can be skipped, if the value is null)
	var priorityValue03 *BACnetPriorityValue = nil
	if m.PriorityValue03 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue03"); pushErr != nil {
			return pushErr
		}
		priorityValue03 = m.PriorityValue03
		_priorityValue03Err := priorityValue03.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue03"); popErr != nil {
			return popErr
		}
		if _priorityValue03Err != nil {
			return errors.Wrap(_priorityValue03Err, "Error serializing 'priorityValue03' field")
		}
	}

	// Optional Field (priorityValue04) (Can be skipped, if the value is null)
	var priorityValue04 *BACnetPriorityValue = nil
	if m.PriorityValue04 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue04"); pushErr != nil {
			return pushErr
		}
		priorityValue04 = m.PriorityValue04
		_priorityValue04Err := priorityValue04.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue04"); popErr != nil {
			return popErr
		}
		if _priorityValue04Err != nil {
			return errors.Wrap(_priorityValue04Err, "Error serializing 'priorityValue04' field")
		}
	}

	// Optional Field (priorityValue05) (Can be skipped, if the value is null)
	var priorityValue05 *BACnetPriorityValue = nil
	if m.PriorityValue05 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue05"); pushErr != nil {
			return pushErr
		}
		priorityValue05 = m.PriorityValue05
		_priorityValue05Err := priorityValue05.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue05"); popErr != nil {
			return popErr
		}
		if _priorityValue05Err != nil {
			return errors.Wrap(_priorityValue05Err, "Error serializing 'priorityValue05' field")
		}
	}

	// Optional Field (priorityValue06) (Can be skipped, if the value is null)
	var priorityValue06 *BACnetPriorityValue = nil
	if m.PriorityValue06 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue06"); pushErr != nil {
			return pushErr
		}
		priorityValue06 = m.PriorityValue06
		_priorityValue06Err := priorityValue06.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue06"); popErr != nil {
			return popErr
		}
		if _priorityValue06Err != nil {
			return errors.Wrap(_priorityValue06Err, "Error serializing 'priorityValue06' field")
		}
	}

	// Optional Field (priorityValue07) (Can be skipped, if the value is null)
	var priorityValue07 *BACnetPriorityValue = nil
	if m.PriorityValue07 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue07"); pushErr != nil {
			return pushErr
		}
		priorityValue07 = m.PriorityValue07
		_priorityValue07Err := priorityValue07.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue07"); popErr != nil {
			return popErr
		}
		if _priorityValue07Err != nil {
			return errors.Wrap(_priorityValue07Err, "Error serializing 'priorityValue07' field")
		}
	}

	// Optional Field (priorityValue08) (Can be skipped, if the value is null)
	var priorityValue08 *BACnetPriorityValue = nil
	if m.PriorityValue08 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue08"); pushErr != nil {
			return pushErr
		}
		priorityValue08 = m.PriorityValue08
		_priorityValue08Err := priorityValue08.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue08"); popErr != nil {
			return popErr
		}
		if _priorityValue08Err != nil {
			return errors.Wrap(_priorityValue08Err, "Error serializing 'priorityValue08' field")
		}
	}

	// Optional Field (priorityValue09) (Can be skipped, if the value is null)
	var priorityValue09 *BACnetPriorityValue = nil
	if m.PriorityValue09 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue09"); pushErr != nil {
			return pushErr
		}
		priorityValue09 = m.PriorityValue09
		_priorityValue09Err := priorityValue09.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue09"); popErr != nil {
			return popErr
		}
		if _priorityValue09Err != nil {
			return errors.Wrap(_priorityValue09Err, "Error serializing 'priorityValue09' field")
		}
	}

	// Optional Field (priorityValue10) (Can be skipped, if the value is null)
	var priorityValue10 *BACnetPriorityValue = nil
	if m.PriorityValue10 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue10"); pushErr != nil {
			return pushErr
		}
		priorityValue10 = m.PriorityValue10
		_priorityValue10Err := priorityValue10.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue10"); popErr != nil {
			return popErr
		}
		if _priorityValue10Err != nil {
			return errors.Wrap(_priorityValue10Err, "Error serializing 'priorityValue10' field")
		}
	}

	// Optional Field (priorityValue11) (Can be skipped, if the value is null)
	var priorityValue11 *BACnetPriorityValue = nil
	if m.PriorityValue11 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue11"); pushErr != nil {
			return pushErr
		}
		priorityValue11 = m.PriorityValue11
		_priorityValue11Err := priorityValue11.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue11"); popErr != nil {
			return popErr
		}
		if _priorityValue11Err != nil {
			return errors.Wrap(_priorityValue11Err, "Error serializing 'priorityValue11' field")
		}
	}

	// Optional Field (priorityValue12) (Can be skipped, if the value is null)
	var priorityValue12 *BACnetPriorityValue = nil
	if m.PriorityValue12 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue12"); pushErr != nil {
			return pushErr
		}
		priorityValue12 = m.PriorityValue12
		_priorityValue12Err := priorityValue12.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue12"); popErr != nil {
			return popErr
		}
		if _priorityValue12Err != nil {
			return errors.Wrap(_priorityValue12Err, "Error serializing 'priorityValue12' field")
		}
	}

	// Optional Field (priorityValue13) (Can be skipped, if the value is null)
	var priorityValue13 *BACnetPriorityValue = nil
	if m.PriorityValue13 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue13"); pushErr != nil {
			return pushErr
		}
		priorityValue13 = m.PriorityValue13
		_priorityValue13Err := priorityValue13.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue13"); popErr != nil {
			return popErr
		}
		if _priorityValue13Err != nil {
			return errors.Wrap(_priorityValue13Err, "Error serializing 'priorityValue13' field")
		}
	}

	// Optional Field (priorityValue14) (Can be skipped, if the value is null)
	var priorityValue14 *BACnetPriorityValue = nil
	if m.PriorityValue14 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue14"); pushErr != nil {
			return pushErr
		}
		priorityValue14 = m.PriorityValue14
		_priorityValue14Err := priorityValue14.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue14"); popErr != nil {
			return popErr
		}
		if _priorityValue14Err != nil {
			return errors.Wrap(_priorityValue14Err, "Error serializing 'priorityValue14' field")
		}
	}

	// Optional Field (priorityValue15) (Can be skipped, if the value is null)
	var priorityValue15 *BACnetPriorityValue = nil
	if m.PriorityValue15 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue15"); pushErr != nil {
			return pushErr
		}
		priorityValue15 = m.PriorityValue15
		_priorityValue15Err := priorityValue15.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue15"); popErr != nil {
			return popErr
		}
		if _priorityValue15Err != nil {
			return errors.Wrap(_priorityValue15Err, "Error serializing 'priorityValue15' field")
		}
	}

	// Optional Field (priorityValue16) (Can be skipped, if the value is null)
	var priorityValue16 *BACnetPriorityValue = nil
	if m.PriorityValue16 != nil {
		if pushErr := writeBuffer.PushContext("priorityValue16"); pushErr != nil {
			return pushErr
		}
		priorityValue16 = m.PriorityValue16
		_priorityValue16Err := priorityValue16.Serialize(writeBuffer)
		if popErr := writeBuffer.PopContext("priorityValue16"); popErr != nil {
			return popErr
		}
		if _priorityValue16Err != nil {
			return errors.Wrap(_priorityValue16Err, "Error serializing 'priorityValue16' field")
		}
	}

	if popErr := writeBuffer.PopContext("BACnetPriorityArray"); popErr != nil {
		return popErr
	}
	return nil
}

func (m *BACnetPriorityArray) String() string {
	if m == nil {
		return "<nil>"
	}
	buffer := utils.NewBoxedWriteBufferWithOptions(true, true)
	if err := m.Serialize(buffer); err != nil {
		return err.Error()
	}
	return buffer.GetBox().String()
}
