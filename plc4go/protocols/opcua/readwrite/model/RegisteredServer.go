/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// RegisteredServer is the corresponding interface of RegisteredServer
type RegisteredServer interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	ExtensionObjectDefinition
	// GetServerUri returns ServerUri (property field)
	GetServerUri() PascalString
	// GetProductUri returns ProductUri (property field)
	GetProductUri() PascalString
	// GetNoOfServerNames returns NoOfServerNames (property field)
	GetNoOfServerNames() int32
	// GetServerNames returns ServerNames (property field)
	GetServerNames() []LocalizedText
	// GetServerType returns ServerType (property field)
	GetServerType() ApplicationType
	// GetGatewayServerUri returns GatewayServerUri (property field)
	GetGatewayServerUri() PascalString
	// GetNoOfDiscoveryUrls returns NoOfDiscoveryUrls (property field)
	GetNoOfDiscoveryUrls() int32
	// GetDiscoveryUrls returns DiscoveryUrls (property field)
	GetDiscoveryUrls() []PascalString
	// GetSemaphoreFilePath returns SemaphoreFilePath (property field)
	GetSemaphoreFilePath() PascalString
	// GetIsOnline returns IsOnline (property field)
	GetIsOnline() bool
}

// RegisteredServerExactly can be used when we want exactly this type and not a type which fulfills RegisteredServer.
// This is useful for switch cases.
type RegisteredServerExactly interface {
	RegisteredServer
	isRegisteredServer() bool
}

// _RegisteredServer is the data-structure of this message
type _RegisteredServer struct {
	*_ExtensionObjectDefinition
	ServerUri         PascalString
	ProductUri        PascalString
	NoOfServerNames   int32
	ServerNames       []LocalizedText
	ServerType        ApplicationType
	GatewayServerUri  PascalString
	NoOfDiscoveryUrls int32
	DiscoveryUrls     []PascalString
	SemaphoreFilePath PascalString
	IsOnline          bool
	// Reserved Fields
	reservedField0 *uint8
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_RegisteredServer) GetIdentifier() string {
	return "434"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_RegisteredServer) InitializeParent(parent ExtensionObjectDefinition) {}

func (m *_RegisteredServer) GetParent() ExtensionObjectDefinition {
	return m._ExtensionObjectDefinition
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_RegisteredServer) GetServerUri() PascalString {
	return m.ServerUri
}

func (m *_RegisteredServer) GetProductUri() PascalString {
	return m.ProductUri
}

func (m *_RegisteredServer) GetNoOfServerNames() int32 {
	return m.NoOfServerNames
}

func (m *_RegisteredServer) GetServerNames() []LocalizedText {
	return m.ServerNames
}

func (m *_RegisteredServer) GetServerType() ApplicationType {
	return m.ServerType
}

func (m *_RegisteredServer) GetGatewayServerUri() PascalString {
	return m.GatewayServerUri
}

func (m *_RegisteredServer) GetNoOfDiscoveryUrls() int32 {
	return m.NoOfDiscoveryUrls
}

func (m *_RegisteredServer) GetDiscoveryUrls() []PascalString {
	return m.DiscoveryUrls
}

func (m *_RegisteredServer) GetSemaphoreFilePath() PascalString {
	return m.SemaphoreFilePath
}

func (m *_RegisteredServer) GetIsOnline() bool {
	return m.IsOnline
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewRegisteredServer factory function for _RegisteredServer
func NewRegisteredServer(serverUri PascalString, productUri PascalString, noOfServerNames int32, serverNames []LocalizedText, serverType ApplicationType, gatewayServerUri PascalString, noOfDiscoveryUrls int32, discoveryUrls []PascalString, semaphoreFilePath PascalString, isOnline bool) *_RegisteredServer {
	_result := &_RegisteredServer{
		ServerUri:                  serverUri,
		ProductUri:                 productUri,
		NoOfServerNames:            noOfServerNames,
		ServerNames:                serverNames,
		ServerType:                 serverType,
		GatewayServerUri:           gatewayServerUri,
		NoOfDiscoveryUrls:          noOfDiscoveryUrls,
		DiscoveryUrls:              discoveryUrls,
		SemaphoreFilePath:          semaphoreFilePath,
		IsOnline:                   isOnline,
		_ExtensionObjectDefinition: NewExtensionObjectDefinition(),
	}
	_result._ExtensionObjectDefinition._ExtensionObjectDefinitionChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastRegisteredServer(structType any) RegisteredServer {
	if casted, ok := structType.(RegisteredServer); ok {
		return casted
	}
	if casted, ok := structType.(*RegisteredServer); ok {
		return *casted
	}
	return nil
}

func (m *_RegisteredServer) GetTypeName() string {
	return "RegisteredServer"
}

func (m *_RegisteredServer) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits(ctx))

	// Simple field (serverUri)
	lengthInBits += m.ServerUri.GetLengthInBits(ctx)

	// Simple field (productUri)
	lengthInBits += m.ProductUri.GetLengthInBits(ctx)

	// Simple field (noOfServerNames)
	lengthInBits += 32

	// Array field
	if len(m.ServerNames) > 0 {
		for _curItem, element := range m.ServerNames {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.ServerNames), _curItem)
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{ GetLengthInBits(context.Context) uint16 }).GetLengthInBits(arrayCtx)
		}
	}

	// Simple field (serverType)
	lengthInBits += 32

	// Simple field (gatewayServerUri)
	lengthInBits += m.GatewayServerUri.GetLengthInBits(ctx)

	// Simple field (noOfDiscoveryUrls)
	lengthInBits += 32

	// Array field
	if len(m.DiscoveryUrls) > 0 {
		for _curItem, element := range m.DiscoveryUrls {
			arrayCtx := utils.CreateArrayContext(ctx, len(m.DiscoveryUrls), _curItem)
			_ = arrayCtx
			_ = _curItem
			lengthInBits += element.(interface{ GetLengthInBits(context.Context) uint16 }).GetLengthInBits(arrayCtx)
		}
	}

	// Simple field (semaphoreFilePath)
	lengthInBits += m.SemaphoreFilePath.GetLengthInBits(ctx)

	// Reserved Field (reserved)
	lengthInBits += 7

	// Simple field (isOnline)
	lengthInBits += 1

	return lengthInBits
}

func (m *_RegisteredServer) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func RegisteredServerParse(ctx context.Context, theBytes []byte, identifier string) (RegisteredServer, error) {
	return RegisteredServerParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes), identifier)
}

func RegisteredServerParseWithBufferProducer(identifier string) func(ctx context.Context, readBuffer utils.ReadBuffer) (RegisteredServer, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (RegisteredServer, error) {
		return RegisteredServerParseWithBuffer(ctx, readBuffer, identifier)
	}
}

func RegisteredServerParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer, identifier string) (RegisteredServer, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("RegisteredServer"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for RegisteredServer")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	serverUri, err := ReadSimpleField[PascalString](ctx, "serverUri", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'serverUri' field"))
	}

	productUri, err := ReadSimpleField[PascalString](ctx, "productUri", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'productUri' field"))
	}

	noOfServerNames, err := ReadSimpleField(ctx, "noOfServerNames", ReadSignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'noOfServerNames' field"))
	}

	serverNames, err := ReadCountArrayField[LocalizedText](ctx, "serverNames", ReadComplex[LocalizedText](LocalizedTextParseWithBuffer, readBuffer), uint64(noOfServerNames))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'serverNames' field"))
	}

	serverType, err := ReadEnumField[ApplicationType](ctx, "serverType", "ApplicationType", ReadEnum(ApplicationTypeByValue, ReadUnsignedInt(readBuffer, uint8(32))))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'serverType' field"))
	}

	gatewayServerUri, err := ReadSimpleField[PascalString](ctx, "gatewayServerUri", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'gatewayServerUri' field"))
	}

	noOfDiscoveryUrls, err := ReadSimpleField(ctx, "noOfDiscoveryUrls", ReadSignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'noOfDiscoveryUrls' field"))
	}

	discoveryUrls, err := ReadCountArrayField[PascalString](ctx, "discoveryUrls", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer), uint64(noOfDiscoveryUrls))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'discoveryUrls' field"))
	}

	semaphoreFilePath, err := ReadSimpleField[PascalString](ctx, "semaphoreFilePath", ReadComplex[PascalString](PascalStringParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'semaphoreFilePath' field"))
	}

	reservedField0, err := ReadReservedField(ctx, "reserved", ReadUnsignedByte(readBuffer, uint8(7)), uint8(0x00))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing reserved field"))
	}

	isOnline, err := ReadSimpleField(ctx, "isOnline", ReadBoolean(readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'isOnline' field"))
	}

	if closeErr := readBuffer.CloseContext("RegisteredServer"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for RegisteredServer")
	}

	// Create a partially initialized instance
	_child := &_RegisteredServer{
		_ExtensionObjectDefinition: &_ExtensionObjectDefinition{},
		ServerUri:                  serverUri,
		ProductUri:                 productUri,
		NoOfServerNames:            noOfServerNames,
		ServerNames:                serverNames,
		ServerType:                 serverType,
		GatewayServerUri:           gatewayServerUri,
		NoOfDiscoveryUrls:          noOfDiscoveryUrls,
		DiscoveryUrls:              discoveryUrls,
		SemaphoreFilePath:          semaphoreFilePath,
		IsOnline:                   isOnline,
		reservedField0:             reservedField0,
	}
	_child._ExtensionObjectDefinition._ExtensionObjectDefinitionChildRequirements = _child
	return _child, nil
}

func (m *_RegisteredServer) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_RegisteredServer) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("RegisteredServer"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for RegisteredServer")
		}

		if err := WriteSimpleField[PascalString](ctx, "serverUri", m.GetServerUri(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'serverUri' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "productUri", m.GetProductUri(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'productUri' field")
		}

		if err := WriteSimpleField[int32](ctx, "noOfServerNames", m.GetNoOfServerNames(), WriteSignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'noOfServerNames' field")
		}

		if err := WriteComplexTypeArrayField(ctx, "serverNames", m.GetServerNames(), writeBuffer); err != nil {
			return errors.Wrap(err, "Error serializing 'serverNames' field")
		}

		if err := WriteSimpleEnumField[ApplicationType](ctx, "serverType", "ApplicationType", m.GetServerType(), WriteEnum[ApplicationType, uint32](ApplicationType.GetValue, ApplicationType.PLC4XEnumName, WriteUnsignedInt(writeBuffer, 32))); err != nil {
			return errors.Wrap(err, "Error serializing 'serverType' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "gatewayServerUri", m.GetGatewayServerUri(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'gatewayServerUri' field")
		}

		if err := WriteSimpleField[int32](ctx, "noOfDiscoveryUrls", m.GetNoOfDiscoveryUrls(), WriteSignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'noOfDiscoveryUrls' field")
		}

		if err := WriteComplexTypeArrayField(ctx, "discoveryUrls", m.GetDiscoveryUrls(), writeBuffer); err != nil {
			return errors.Wrap(err, "Error serializing 'discoveryUrls' field")
		}

		if err := WriteSimpleField[PascalString](ctx, "semaphoreFilePath", m.GetSemaphoreFilePath(), WriteComplex[PascalString](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'semaphoreFilePath' field")
		}

		if err := WriteReservedField[uint8](ctx, "reserved", uint8(0x00), WriteUnsignedByte(writeBuffer, 7)); err != nil {
			return errors.Wrap(err, "Error serializing 'reserved' field number 1")
		}

		if err := WriteSimpleField[bool](ctx, "isOnline", m.GetIsOnline(), WriteBoolean(writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'isOnline' field")
		}

		if popErr := writeBuffer.PopContext("RegisteredServer"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for RegisteredServer")
		}
		return nil
	}
	return m.SerializeParent(ctx, writeBuffer, m, ser)
}

func (m *_RegisteredServer) isRegisteredServer() bool {
	return true
}

func (m *_RegisteredServer) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
