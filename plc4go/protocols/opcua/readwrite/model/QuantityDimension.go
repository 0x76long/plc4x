/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// QuantityDimension is the corresponding interface of QuantityDimension
type QuantityDimension interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	ExtensionObjectDefinition
	// GetMassExponent returns MassExponent (property field)
	GetMassExponent() int8
	// GetLengthExponent returns LengthExponent (property field)
	GetLengthExponent() int8
	// GetTimeExponent returns TimeExponent (property field)
	GetTimeExponent() int8
	// GetElectricCurrentExponent returns ElectricCurrentExponent (property field)
	GetElectricCurrentExponent() int8
	// GetAmountOfSubstanceExponent returns AmountOfSubstanceExponent (property field)
	GetAmountOfSubstanceExponent() int8
	// GetLuminousIntensityExponent returns LuminousIntensityExponent (property field)
	GetLuminousIntensityExponent() int8
	// GetAbsoluteTemperatureExponent returns AbsoluteTemperatureExponent (property field)
	GetAbsoluteTemperatureExponent() int8
	// GetDimensionlessExponent returns DimensionlessExponent (property field)
	GetDimensionlessExponent() int8
}

// QuantityDimensionExactly can be used when we want exactly this type and not a type which fulfills QuantityDimension.
// This is useful for switch cases.
type QuantityDimensionExactly interface {
	QuantityDimension
	isQuantityDimension() bool
}

// _QuantityDimension is the data-structure of this message
type _QuantityDimension struct {
	*_ExtensionObjectDefinition
	MassExponent                int8
	LengthExponent              int8
	TimeExponent                int8
	ElectricCurrentExponent     int8
	AmountOfSubstanceExponent   int8
	LuminousIntensityExponent   int8
	AbsoluteTemperatureExponent int8
	DimensionlessExponent       int8
}

var _ QuantityDimension = (*_QuantityDimension)(nil)

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_QuantityDimension) GetIdentifier() string {
	return "32440"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_QuantityDimension) InitializeParent(parent ExtensionObjectDefinition) {}

func (m *_QuantityDimension) GetParent() ExtensionObjectDefinition {
	return m._ExtensionObjectDefinition
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_QuantityDimension) GetMassExponent() int8 {
	return m.MassExponent
}

func (m *_QuantityDimension) GetLengthExponent() int8 {
	return m.LengthExponent
}

func (m *_QuantityDimension) GetTimeExponent() int8 {
	return m.TimeExponent
}

func (m *_QuantityDimension) GetElectricCurrentExponent() int8 {
	return m.ElectricCurrentExponent
}

func (m *_QuantityDimension) GetAmountOfSubstanceExponent() int8 {
	return m.AmountOfSubstanceExponent
}

func (m *_QuantityDimension) GetLuminousIntensityExponent() int8 {
	return m.LuminousIntensityExponent
}

func (m *_QuantityDimension) GetAbsoluteTemperatureExponent() int8 {
	return m.AbsoluteTemperatureExponent
}

func (m *_QuantityDimension) GetDimensionlessExponent() int8 {
	return m.DimensionlessExponent
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewQuantityDimension factory function for _QuantityDimension
func NewQuantityDimension(massExponent int8, lengthExponent int8, timeExponent int8, electricCurrentExponent int8, amountOfSubstanceExponent int8, luminousIntensityExponent int8, absoluteTemperatureExponent int8, dimensionlessExponent int8) *_QuantityDimension {
	_result := &_QuantityDimension{
		MassExponent:                massExponent,
		LengthExponent:              lengthExponent,
		TimeExponent:                timeExponent,
		ElectricCurrentExponent:     electricCurrentExponent,
		AmountOfSubstanceExponent:   amountOfSubstanceExponent,
		LuminousIntensityExponent:   luminousIntensityExponent,
		AbsoluteTemperatureExponent: absoluteTemperatureExponent,
		DimensionlessExponent:       dimensionlessExponent,
		_ExtensionObjectDefinition:  NewExtensionObjectDefinition(),
	}
	_result._ExtensionObjectDefinition._ExtensionObjectDefinitionChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastQuantityDimension(structType any) QuantityDimension {
	if casted, ok := structType.(QuantityDimension); ok {
		return casted
	}
	if casted, ok := structType.(*QuantityDimension); ok {
		return *casted
	}
	return nil
}

func (m *_QuantityDimension) GetTypeName() string {
	return "QuantityDimension"
}

func (m *_QuantityDimension) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits(ctx))

	// Simple field (massExponent)
	lengthInBits += 8

	// Simple field (lengthExponent)
	lengthInBits += 8

	// Simple field (timeExponent)
	lengthInBits += 8

	// Simple field (electricCurrentExponent)
	lengthInBits += 8

	// Simple field (amountOfSubstanceExponent)
	lengthInBits += 8

	// Simple field (luminousIntensityExponent)
	lengthInBits += 8

	// Simple field (absoluteTemperatureExponent)
	lengthInBits += 8

	// Simple field (dimensionlessExponent)
	lengthInBits += 8

	return lengthInBits
}

func (m *_QuantityDimension) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func QuantityDimensionParse(ctx context.Context, theBytes []byte, identifier string) (QuantityDimension, error) {
	return QuantityDimensionParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes), identifier)
}

func QuantityDimensionParseWithBufferProducer(identifier string) func(ctx context.Context, readBuffer utils.ReadBuffer) (QuantityDimension, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (QuantityDimension, error) {
		return QuantityDimensionParseWithBuffer(ctx, readBuffer, identifier)
	}
}

func QuantityDimensionParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer, identifier string) (QuantityDimension, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("QuantityDimension"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for QuantityDimension")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	massExponent, err := ReadSimpleField(ctx, "massExponent", ReadSignedByte(readBuffer, uint8(8)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'massExponent' field"))
	}

	lengthExponent, err := ReadSimpleField(ctx, "lengthExponent", ReadSignedByte(readBuffer, uint8(8)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'lengthExponent' field"))
	}

	timeExponent, err := ReadSimpleField(ctx, "timeExponent", ReadSignedByte(readBuffer, uint8(8)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'timeExponent' field"))
	}

	electricCurrentExponent, err := ReadSimpleField(ctx, "electricCurrentExponent", ReadSignedByte(readBuffer, uint8(8)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'electricCurrentExponent' field"))
	}

	amountOfSubstanceExponent, err := ReadSimpleField(ctx, "amountOfSubstanceExponent", ReadSignedByte(readBuffer, uint8(8)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'amountOfSubstanceExponent' field"))
	}

	luminousIntensityExponent, err := ReadSimpleField(ctx, "luminousIntensityExponent", ReadSignedByte(readBuffer, uint8(8)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'luminousIntensityExponent' field"))
	}

	absoluteTemperatureExponent, err := ReadSimpleField(ctx, "absoluteTemperatureExponent", ReadSignedByte(readBuffer, uint8(8)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'absoluteTemperatureExponent' field"))
	}

	dimensionlessExponent, err := ReadSimpleField(ctx, "dimensionlessExponent", ReadSignedByte(readBuffer, uint8(8)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'dimensionlessExponent' field"))
	}

	if closeErr := readBuffer.CloseContext("QuantityDimension"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for QuantityDimension")
	}

	// Create a partially initialized instance
	_child := &_QuantityDimension{
		_ExtensionObjectDefinition:  &_ExtensionObjectDefinition{},
		MassExponent:                massExponent,
		LengthExponent:              lengthExponent,
		TimeExponent:                timeExponent,
		ElectricCurrentExponent:     electricCurrentExponent,
		AmountOfSubstanceExponent:   amountOfSubstanceExponent,
		LuminousIntensityExponent:   luminousIntensityExponent,
		AbsoluteTemperatureExponent: absoluteTemperatureExponent,
		DimensionlessExponent:       dimensionlessExponent,
	}
	_child._ExtensionObjectDefinition._ExtensionObjectDefinitionChildRequirements = _child
	return _child, nil
}

func (m *_QuantityDimension) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_QuantityDimension) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("QuantityDimension"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for QuantityDimension")
		}

		if err := WriteSimpleField[int8](ctx, "massExponent", m.GetMassExponent(), WriteSignedByte(writeBuffer, 8)); err != nil {
			return errors.Wrap(err, "Error serializing 'massExponent' field")
		}

		if err := WriteSimpleField[int8](ctx, "lengthExponent", m.GetLengthExponent(), WriteSignedByte(writeBuffer, 8)); err != nil {
			return errors.Wrap(err, "Error serializing 'lengthExponent' field")
		}

		if err := WriteSimpleField[int8](ctx, "timeExponent", m.GetTimeExponent(), WriteSignedByte(writeBuffer, 8)); err != nil {
			return errors.Wrap(err, "Error serializing 'timeExponent' field")
		}

		if err := WriteSimpleField[int8](ctx, "electricCurrentExponent", m.GetElectricCurrentExponent(), WriteSignedByte(writeBuffer, 8)); err != nil {
			return errors.Wrap(err, "Error serializing 'electricCurrentExponent' field")
		}

		if err := WriteSimpleField[int8](ctx, "amountOfSubstanceExponent", m.GetAmountOfSubstanceExponent(), WriteSignedByte(writeBuffer, 8)); err != nil {
			return errors.Wrap(err, "Error serializing 'amountOfSubstanceExponent' field")
		}

		if err := WriteSimpleField[int8](ctx, "luminousIntensityExponent", m.GetLuminousIntensityExponent(), WriteSignedByte(writeBuffer, 8)); err != nil {
			return errors.Wrap(err, "Error serializing 'luminousIntensityExponent' field")
		}

		if err := WriteSimpleField[int8](ctx, "absoluteTemperatureExponent", m.GetAbsoluteTemperatureExponent(), WriteSignedByte(writeBuffer, 8)); err != nil {
			return errors.Wrap(err, "Error serializing 'absoluteTemperatureExponent' field")
		}

		if err := WriteSimpleField[int8](ctx, "dimensionlessExponent", m.GetDimensionlessExponent(), WriteSignedByte(writeBuffer, 8)); err != nil {
			return errors.Wrap(err, "Error serializing 'dimensionlessExponent' field")
		}

		if popErr := writeBuffer.PopContext("QuantityDimension"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for QuantityDimension")
		}
		return nil
	}
	return m.SerializeParent(ctx, writeBuffer, m, ser)
}

func (m *_QuantityDimension) isQuantityDimension() bool {
	return true
}

func (m *_QuantityDimension) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
