/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"

	"github.com/pkg/errors"
	"github.com/rs/zerolog"

	. "github.com/apache/plc4x/plc4go/spi/codegen/fields"
	. "github.com/apache/plc4x/plc4go/spi/codegen/io"
	"github.com/apache/plc4x/plc4go/spi/utils"
)

// Code generated by code-generation. DO NOT EDIT.

// ServerStatusDataType is the corresponding interface of ServerStatusDataType
type ServerStatusDataType interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	ExtensionObjectDefinition
	// GetStartTime returns StartTime (property field)
	GetStartTime() int64
	// GetCurrentTime returns CurrentTime (property field)
	GetCurrentTime() int64
	// GetState returns State (property field)
	GetState() ServerState
	// GetBuildInfo returns BuildInfo (property field)
	GetBuildInfo() ExtensionObjectDefinition
	// GetSecondsTillShutdown returns SecondsTillShutdown (property field)
	GetSecondsTillShutdown() uint32
	// GetShutdownReason returns ShutdownReason (property field)
	GetShutdownReason() LocalizedText
}

// ServerStatusDataTypeExactly can be used when we want exactly this type and not a type which fulfills ServerStatusDataType.
// This is useful for switch cases.
type ServerStatusDataTypeExactly interface {
	ServerStatusDataType
	isServerStatusDataType() bool
}

// _ServerStatusDataType is the data-structure of this message
type _ServerStatusDataType struct {
	*_ExtensionObjectDefinition
	StartTime           int64
	CurrentTime         int64
	State               ServerState
	BuildInfo           ExtensionObjectDefinition
	SecondsTillShutdown uint32
	ShutdownReason      LocalizedText
}

var _ ServerStatusDataType = (*_ServerStatusDataType)(nil)

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

func (m *_ServerStatusDataType) GetIdentifier() string {
	return "864"
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_ServerStatusDataType) InitializeParent(parent ExtensionObjectDefinition) {}

func (m *_ServerStatusDataType) GetParent() ExtensionObjectDefinition {
	return m._ExtensionObjectDefinition
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_ServerStatusDataType) GetStartTime() int64 {
	return m.StartTime
}

func (m *_ServerStatusDataType) GetCurrentTime() int64 {
	return m.CurrentTime
}

func (m *_ServerStatusDataType) GetState() ServerState {
	return m.State
}

func (m *_ServerStatusDataType) GetBuildInfo() ExtensionObjectDefinition {
	return m.BuildInfo
}

func (m *_ServerStatusDataType) GetSecondsTillShutdown() uint32 {
	return m.SecondsTillShutdown
}

func (m *_ServerStatusDataType) GetShutdownReason() LocalizedText {
	return m.ShutdownReason
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewServerStatusDataType factory function for _ServerStatusDataType
func NewServerStatusDataType(startTime int64, currentTime int64, state ServerState, buildInfo ExtensionObjectDefinition, secondsTillShutdown uint32, shutdownReason LocalizedText) *_ServerStatusDataType {
	_result := &_ServerStatusDataType{
		StartTime:                  startTime,
		CurrentTime:                currentTime,
		State:                      state,
		BuildInfo:                  buildInfo,
		SecondsTillShutdown:        secondsTillShutdown,
		ShutdownReason:             shutdownReason,
		_ExtensionObjectDefinition: NewExtensionObjectDefinition(),
	}
	_result._ExtensionObjectDefinition._ExtensionObjectDefinitionChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastServerStatusDataType(structType any) ServerStatusDataType {
	if casted, ok := structType.(ServerStatusDataType); ok {
		return casted
	}
	if casted, ok := structType.(*ServerStatusDataType); ok {
		return *casted
	}
	return nil
}

func (m *_ServerStatusDataType) GetTypeName() string {
	return "ServerStatusDataType"
}

func (m *_ServerStatusDataType) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits(ctx))

	// Simple field (startTime)
	lengthInBits += 64

	// Simple field (currentTime)
	lengthInBits += 64

	// Simple field (state)
	lengthInBits += 32

	// Simple field (buildInfo)
	lengthInBits += m.BuildInfo.GetLengthInBits(ctx)

	// Simple field (secondsTillShutdown)
	lengthInBits += 32

	// Simple field (shutdownReason)
	lengthInBits += m.ShutdownReason.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_ServerStatusDataType) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func ServerStatusDataTypeParse(ctx context.Context, theBytes []byte, identifier string) (ServerStatusDataType, error) {
	return ServerStatusDataTypeParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes), identifier)
}

func ServerStatusDataTypeParseWithBufferProducer(identifier string) func(ctx context.Context, readBuffer utils.ReadBuffer) (ServerStatusDataType, error) {
	return func(ctx context.Context, readBuffer utils.ReadBuffer) (ServerStatusDataType, error) {
		return ServerStatusDataTypeParseWithBuffer(ctx, readBuffer, identifier)
	}
}

func ServerStatusDataTypeParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer, identifier string) (ServerStatusDataType, error) {
	positionAware := readBuffer
	_ = positionAware
	if pullErr := readBuffer.PullContext("ServerStatusDataType"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for ServerStatusDataType")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	startTime, err := ReadSimpleField(ctx, "startTime", ReadSignedLong(readBuffer, uint8(64)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'startTime' field"))
	}

	currentTime, err := ReadSimpleField(ctx, "currentTime", ReadSignedLong(readBuffer, uint8(64)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'currentTime' field"))
	}

	state, err := ReadEnumField[ServerState](ctx, "state", "ServerState", ReadEnum(ServerStateByValue, ReadUnsignedInt(readBuffer, uint8(32))))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'state' field"))
	}

	buildInfo, err := ReadSimpleField[ExtensionObjectDefinition](ctx, "buildInfo", ReadComplex[ExtensionObjectDefinition](ExtensionObjectDefinitionParseWithBufferProducer[ExtensionObjectDefinition]((string)("340")), readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'buildInfo' field"))
	}

	secondsTillShutdown, err := ReadSimpleField(ctx, "secondsTillShutdown", ReadUnsignedInt(readBuffer, uint8(32)))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'secondsTillShutdown' field"))
	}

	shutdownReason, err := ReadSimpleField[LocalizedText](ctx, "shutdownReason", ReadComplex[LocalizedText](LocalizedTextParseWithBuffer, readBuffer))
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("Error parsing 'shutdownReason' field"))
	}

	if closeErr := readBuffer.CloseContext("ServerStatusDataType"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for ServerStatusDataType")
	}

	// Create a partially initialized instance
	_child := &_ServerStatusDataType{
		_ExtensionObjectDefinition: &_ExtensionObjectDefinition{},
		StartTime:                  startTime,
		CurrentTime:                currentTime,
		State:                      state,
		BuildInfo:                  buildInfo,
		SecondsTillShutdown:        secondsTillShutdown,
		ShutdownReason:             shutdownReason,
	}
	_child._ExtensionObjectDefinition._ExtensionObjectDefinitionChildRequirements = _child
	return _child, nil
}

func (m *_ServerStatusDataType) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_ServerStatusDataType) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("ServerStatusDataType"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for ServerStatusDataType")
		}

		if err := WriteSimpleField[int64](ctx, "startTime", m.GetStartTime(), WriteSignedLong(writeBuffer, 64)); err != nil {
			return errors.Wrap(err, "Error serializing 'startTime' field")
		}

		if err := WriteSimpleField[int64](ctx, "currentTime", m.GetCurrentTime(), WriteSignedLong(writeBuffer, 64)); err != nil {
			return errors.Wrap(err, "Error serializing 'currentTime' field")
		}

		if err := WriteSimpleEnumField[ServerState](ctx, "state", "ServerState", m.GetState(), WriteEnum[ServerState, uint32](ServerState.GetValue, ServerState.PLC4XEnumName, WriteUnsignedInt(writeBuffer, 32))); err != nil {
			return errors.Wrap(err, "Error serializing 'state' field")
		}

		if err := WriteSimpleField[ExtensionObjectDefinition](ctx, "buildInfo", m.GetBuildInfo(), WriteComplex[ExtensionObjectDefinition](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'buildInfo' field")
		}

		if err := WriteSimpleField[uint32](ctx, "secondsTillShutdown", m.GetSecondsTillShutdown(), WriteUnsignedInt(writeBuffer, 32)); err != nil {
			return errors.Wrap(err, "Error serializing 'secondsTillShutdown' field")
		}

		if err := WriteSimpleField[LocalizedText](ctx, "shutdownReason", m.GetShutdownReason(), WriteComplex[LocalizedText](writeBuffer)); err != nil {
			return errors.Wrap(err, "Error serializing 'shutdownReason' field")
		}

		if popErr := writeBuffer.PopContext("ServerStatusDataType"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for ServerStatusDataType")
		}
		return nil
	}
	return m.SerializeParent(ctx, writeBuffer, m, ser)
}

func (m *_ServerStatusDataType) isServerStatusDataType() bool {
	return true
}

func (m *_ServerStatusDataType) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
