/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package model

import (
	"context"
	"fmt"
	"github.com/apache/plc4x/plc4go/spi/utils"
	"github.com/pkg/errors"
	"github.com/rs/zerolog"
)

// Code generated by code-generation. DO NOT EDIT.

// PubSubConfigurationValueDataType is the corresponding interface of PubSubConfigurationValueDataType
type PubSubConfigurationValueDataType interface {
	fmt.Stringer
	utils.LengthAware
	utils.Serializable
	ExtensionObjectDefinition
	// GetConfigurationElement returns ConfigurationElement (property field)
	GetConfigurationElement() ExtensionObjectDefinition
	// GetName returns Name (property field)
	GetName() PascalString
	// GetIdentifier returns Identifier (property field)
	GetIdentifier() Variant
}

// PubSubConfigurationValueDataTypeExactly can be used when we want exactly this type and not a type which fulfills PubSubConfigurationValueDataType.
// This is useful for switch cases.
type PubSubConfigurationValueDataTypeExactly interface {
	PubSubConfigurationValueDataType
	isPubSubConfigurationValueDataType() bool
}

// _PubSubConfigurationValueDataType is the data-structure of this message
type _PubSubConfigurationValueDataType struct {
	*_ExtensionObjectDefinition
	ConfigurationElement ExtensionObjectDefinition
	Name                 PascalString
	Identifier           Variant
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for discriminator values.
///////////////////////

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

func (m *_PubSubConfigurationValueDataType) InitializeParent(parent ExtensionObjectDefinition) {}

func (m *_PubSubConfigurationValueDataType) GetParent() ExtensionObjectDefinition {
	return m._ExtensionObjectDefinition
}

///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
/////////////////////// Accessors for property fields.
///////////////////////

func (m *_PubSubConfigurationValueDataType) GetConfigurationElement() ExtensionObjectDefinition {
	return m.ConfigurationElement
}

func (m *_PubSubConfigurationValueDataType) GetName() PascalString {
	return m.Name
}

func (m *_PubSubConfigurationValueDataType) GetIdentifier() Variant {
	return m.Identifier
}

///////////////////////
///////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////

// NewPubSubConfigurationValueDataType factory function for _PubSubConfigurationValueDataType
func NewPubSubConfigurationValueDataType(configurationElement ExtensionObjectDefinition, name PascalString, identifier Variant) *_PubSubConfigurationValueDataType {
	_result := &_PubSubConfigurationValueDataType{
		ConfigurationElement:       configurationElement,
		Name:                       name,
		Identifier:                 identifier,
		_ExtensionObjectDefinition: NewExtensionObjectDefinition(),
	}
	_result._ExtensionObjectDefinition._ExtensionObjectDefinitionChildRequirements = _result
	return _result
}

// Deprecated: use the interface for direct cast
func CastPubSubConfigurationValueDataType(structType any) PubSubConfigurationValueDataType {
	if casted, ok := structType.(PubSubConfigurationValueDataType); ok {
		return casted
	}
	if casted, ok := structType.(*PubSubConfigurationValueDataType); ok {
		return *casted
	}
	return nil
}

func (m *_PubSubConfigurationValueDataType) GetTypeName() string {
	return "PubSubConfigurationValueDataType"
}

func (m *_PubSubConfigurationValueDataType) GetLengthInBits(ctx context.Context) uint16 {
	lengthInBits := uint16(m.GetParentLengthInBits(ctx))

	// Simple field (configurationElement)
	lengthInBits += m.ConfigurationElement.GetLengthInBits(ctx)

	// Simple field (name)
	lengthInBits += m.Name.GetLengthInBits(ctx)

	// Simple field (identifier)
	lengthInBits += m.Identifier.GetLengthInBits(ctx)

	return lengthInBits
}

func (m *_PubSubConfigurationValueDataType) GetLengthInBytes(ctx context.Context) uint16 {
	return m.GetLengthInBits(ctx) / 8
}

func PubSubConfigurationValueDataTypeParse(ctx context.Context, theBytes []byte, identifier string) (PubSubConfigurationValueDataType, error) {
	return PubSubConfigurationValueDataTypeParseWithBuffer(ctx, utils.NewReadBufferByteBased(theBytes), identifier)
}

func PubSubConfigurationValueDataTypeParseWithBuffer(ctx context.Context, readBuffer utils.ReadBuffer, identifier string) (PubSubConfigurationValueDataType, error) {
	positionAware := readBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	if pullErr := readBuffer.PullContext("PubSubConfigurationValueDataType"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for PubSubConfigurationValueDataType")
	}
	currentPos := positionAware.GetPos()
	_ = currentPos

	// Simple Field (configurationElement)
	if pullErr := readBuffer.PullContext("configurationElement"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for configurationElement")
	}
	_configurationElement, _configurationElementErr := ExtensionObjectDefinitionParseWithBuffer(ctx, readBuffer, string("25521"))
	if _configurationElementErr != nil {
		return nil, errors.Wrap(_configurationElementErr, "Error parsing 'configurationElement' field of PubSubConfigurationValueDataType")
	}
	configurationElement := _configurationElement.(ExtensionObjectDefinition)
	if closeErr := readBuffer.CloseContext("configurationElement"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for configurationElement")
	}

	// Simple Field (name)
	if pullErr := readBuffer.PullContext("name"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for name")
	}
	_name, _nameErr := PascalStringParseWithBuffer(ctx, readBuffer)
	if _nameErr != nil {
		return nil, errors.Wrap(_nameErr, "Error parsing 'name' field of PubSubConfigurationValueDataType")
	}
	name := _name.(PascalString)
	if closeErr := readBuffer.CloseContext("name"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for name")
	}

	// Simple Field (identifier)
	if pullErr := readBuffer.PullContext("identifier"); pullErr != nil {
		return nil, errors.Wrap(pullErr, "Error pulling for identifier")
	}
	_identifier, _identifierErr := VariantParseWithBuffer(ctx, readBuffer)
	if _identifierErr != nil {
		return nil, errors.Wrap(_identifierErr, "Error parsing 'identifier' field of PubSubConfigurationValueDataType")
	}
	identifier := _identifier.(Variant)
	if closeErr := readBuffer.CloseContext("identifier"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for identifier")
	}

	if closeErr := readBuffer.CloseContext("PubSubConfigurationValueDataType"); closeErr != nil {
		return nil, errors.Wrap(closeErr, "Error closing for PubSubConfigurationValueDataType")
	}

	// Create a partially initialized instance
	_child := &_PubSubConfigurationValueDataType{
		_ExtensionObjectDefinition: &_ExtensionObjectDefinition{},
		ConfigurationElement:       configurationElement,
		Name:                       name,
		Identifier:                 identifier,
	}
	_child._ExtensionObjectDefinition._ExtensionObjectDefinitionChildRequirements = _child
	return _child, nil
}

func (m *_PubSubConfigurationValueDataType) Serialize() ([]byte, error) {
	wb := utils.NewWriteBufferByteBased(utils.WithInitialSizeForByteBasedBuffer(int(m.GetLengthInBytes(context.Background()))))
	if err := m.SerializeWithWriteBuffer(context.Background(), wb); err != nil {
		return nil, err
	}
	return wb.GetBytes(), nil
}

func (m *_PubSubConfigurationValueDataType) SerializeWithWriteBuffer(ctx context.Context, writeBuffer utils.WriteBuffer) error {
	positionAware := writeBuffer
	_ = positionAware
	log := zerolog.Ctx(ctx)
	_ = log
	ser := func() error {
		if pushErr := writeBuffer.PushContext("PubSubConfigurationValueDataType"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for PubSubConfigurationValueDataType")
		}

		// Simple Field (configurationElement)
		if pushErr := writeBuffer.PushContext("configurationElement"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for configurationElement")
		}
		_configurationElementErr := writeBuffer.WriteSerializable(ctx, m.GetConfigurationElement())
		if popErr := writeBuffer.PopContext("configurationElement"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for configurationElement")
		}
		if _configurationElementErr != nil {
			return errors.Wrap(_configurationElementErr, "Error serializing 'configurationElement' field")
		}

		// Simple Field (name)
		if pushErr := writeBuffer.PushContext("name"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for name")
		}
		_nameErr := writeBuffer.WriteSerializable(ctx, m.GetName())
		if popErr := writeBuffer.PopContext("name"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for name")
		}
		if _nameErr != nil {
			return errors.Wrap(_nameErr, "Error serializing 'name' field")
		}

		// Simple Field (identifier)
		if pushErr := writeBuffer.PushContext("identifier"); pushErr != nil {
			return errors.Wrap(pushErr, "Error pushing for identifier")
		}
		_identifierErr := writeBuffer.WriteSerializable(ctx, m.GetIdentifier())
		if popErr := writeBuffer.PopContext("identifier"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for identifier")
		}
		if _identifierErr != nil {
			return errors.Wrap(_identifierErr, "Error serializing 'identifier' field")
		}

		if popErr := writeBuffer.PopContext("PubSubConfigurationValueDataType"); popErr != nil {
			return errors.Wrap(popErr, "Error popping for PubSubConfigurationValueDataType")
		}
		return nil
	}
	return m.SerializeParent(ctx, writeBuffer, m, ser)
}

func (m *_PubSubConfigurationValueDataType) isPubSubConfigurationValueDataType() bool {
	return true
}

func (m *_PubSubConfigurationValueDataType) String() string {
	if m == nil {
		return "<nil>"
	}
	writeBuffer := utils.NewWriteBufferBoxBasedWithOptions(true, true)
	if err := writeBuffer.WriteSerializable(context.Background(), m); err != nil {
		return err.Error()
	}
	return writeBuffer.GetBox().String()
}
