/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package org.apache.plc4x.java.s7.mina;

import org.apache.mina.core.buffer.IoBuffer;
import org.apache.mina.core.filterchain.IoFilterAdapter;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.core.write.WriteRequest;
import org.apache.mina.core.write.WriteRequestWrapper;
import org.apache.plc4x.java.isotp.mina.model.IsoTPMessage;
import org.apache.plc4x.java.isotp.mina.model.tpdus.DataTpdu;
import org.apache.plc4x.java.s7.mina.model.messages.SetupCommunicationRequestMessage;
import org.apache.plc4x.java.s7.mina.model.params.items.ReadVarRequestItem;
import org.apache.plc4x.java.s7.mina.model.params.items.S7AnyReadVarRequestItem;
import org.apache.plc4x.java.s7.mina.model.messages.S7Message;
import org.apache.plc4x.java.s7.mina.model.messages.S7RequestMessage;
import org.apache.plc4x.java.s7.mina.model.messages.S7ResponseMessage;
import org.apache.plc4x.java.s7.mina.model.params.ReadVarParameter;
import org.apache.plc4x.java.s7.mina.model.params.S7Parameter;
import org.apache.plc4x.java.s7.mina.model.params.SetupCommunicationParameter;
import org.apache.plc4x.java.s7.mina.model.payloads.S7AnyReadVarPayload;
import org.apache.plc4x.java.s7.mina.model.payloads.S7Payload;
import org.apache.plc4x.java.s7.mina.model.types.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

public class S7FilterAdapter extends IoFilterAdapter {

    public final static String REQUESTED_MAX_AMQ_CALLER_SIZE_CALLER = "S7_REQUESTED_MAX_AMQ_CALLER";
    public final static String REQUESTED_MAX_AMQ_CALLEE_SIZE_CALLER = "S7_REQUESTED_MAX_AMQ_CALLEE";
    public final static String REQUESTED_PDU_SIZE = "S7_REQUESTED_PDU_SIZE";

    private static final byte S7_PROTOCOL_MAGIC_NUMBER = 0x32;

    private final static Logger logger = LoggerFactory.getLogger(S7FilterAdapter.class);

    @Override
    public void sessionOpened(NextFilter nextFilter, IoSession session) throws Exception {
        // Get parameters from the session.
        short maxAmqCaller = 8;
        Object attr = session.getAttribute(REQUESTED_MAX_AMQ_CALLER_SIZE_CALLER);
        if((attr != null) && (attr instanceof Short)) {
            maxAmqCaller = (short) attr;
        }
        short maxAmqCallee = 8;
        attr = session.getAttribute(REQUESTED_MAX_AMQ_CALLEE_SIZE_CALLER);
        if((attr != null) && (attr instanceof Short)) {
            maxAmqCallee = (short) attr;
        }
        short pduSize = (byte) 1024;
        attr = session.getAttribute(REQUESTED_PDU_SIZE);
        if((attr != null) && (attr instanceof Short)) {
            pduSize = (short) attr;
        }

        // Setup Communication
        SetupCommunicationRequestMessage setupCommunicationRequestMessage =
            new SetupCommunicationRequestMessage((short) 7, maxAmqCaller, maxAmqCallee, pduSize);

        session.write(setupCommunicationRequestMessage);
    }

    @Override
    public void filterWrite(NextFilter nextFilter, IoSession session, WriteRequest writeRequest) throws Exception {
        if (writeRequest.getMessage() instanceof S7Message) {
            logger.debug("S7 Message sent: {}", new Object[]{session});
            S7Message s7Message = (S7Message) writeRequest.getMessage();

            // Allocate a buffer that's big enough for the entire message.
            final IoBuffer buffer = IoBuffer.allocate(1).setAutoExpand(true);

            buffer.put(S7_PROTOCOL_MAGIC_NUMBER);
            buffer.put(s7Message.getMessageType().getCode());
            // Reserved (is always constant 0x0000)
            buffer.putShort((short) 0x0000);
            // PDU Reference (Request Id, generated by the initiating node)
            buffer.putShort(s7Message.getTpduReference());
            // S7 message parameters length
            buffer.putShort(getParametersLength(s7Message.getParameters()));
            // Data field length
            buffer.putShort(getPayloadsLength(s7Message.getPayloads()));
            if(s7Message instanceof S7ResponseMessage) {
                S7ResponseMessage s7ResponseMessage = (S7ResponseMessage) s7Message;
                buffer.put(s7ResponseMessage.getErrorClass());
                buffer.put(s7ResponseMessage.getErrorCode());
            }

            for (S7Parameter s7Parameter : s7Message.getParameters()) {
                buffer.put(s7Parameter.getType().getCode());
                switch (s7Parameter.getType()) {
                    case READ_VAR: {
                        ReadVarParameter readVar = (ReadVarParameter) s7Parameter;
                        List<ReadVarRequestItem> items = readVar.getItems();
                        // Item count (Read one variable at a time)
                        buffer.put((byte) items.size());
                        for (ReadVarRequestItem item : items) {
                            switch (item.getAddressingMode()) {
                                case S7ANY: {
                                    S7AnyReadVarRequestItem s7AnyRequestItem = (S7AnyReadVarRequestItem) item;
                                    buffer.put(s7AnyRequestItem.getSpecificationType().getCode());
                                    // Length of this item (excluding spec type and length)
                                    buffer.put((byte) 0x0a);
                                    buffer.put(s7AnyRequestItem.getAddressingMode().getCode());
                                    buffer.put(s7AnyRequestItem.getTransportSize().getCode());
                                    buffer.putShort(s7AnyRequestItem.getNumElements());
                                    buffer.putShort(s7AnyRequestItem.getDataBlockNumber());
                                    buffer.put(s7AnyRequestItem.getMemoryArea().getCode());
                                    buffer.putShort(s7AnyRequestItem.getByteOffset());
                                    buffer.put(s7AnyRequestItem.getBitOffset());
                                    break;
                                }
                                default:
                                    logger.error("writing this item type not implemented");
                                    return;
                            }
                        }
                        break;
                    }
                    case SETUP_COMMUNICATION: {
                        SetupCommunicationParameter setupCommunication = (SetupCommunicationParameter) s7Parameter;
                        // Reserved (is always constant 0x00)
                        buffer.put((byte) 0x00);
                        buffer.putShort(setupCommunication.getMaxAmqCaller());
                        buffer.putShort(setupCommunication.getMaxAmqCallee());
                        buffer.putShort(setupCommunication.getPduLength());
                        break;
                    }
                    case WRITE_VAR: {
                        break;
                    }
                }
            }

            for (S7Payload payload : s7Message.getPayloads()) {
                switch (payload.getType()) {
                    case READ_VAR: {
                        break;
                    }
                    case WRITE_VAR: {
                        break;
                    }
                }
            }

            // Prepare the buffer for sending.
            buffer.flip();

            writeRequest = new WriteRequestWrapper(writeRequest) {
                @Override
                public Object getMessage() {
                    return new DataTpdu(true, (byte) 1, Collections.emptyList(), buffer);
                }
            };
        }
        nextFilter.filterWrite(session, writeRequest);
    }

    @Override
    public void messageReceived(NextFilter nextFilter, IoSession session, Object message) throws Exception {
        if (message instanceof IsoTPMessage && ((IsoTPMessage) message).getUserData().hasRemaining()) {
            logger.debug("S7 Message received: {}", new Object[]{session});

            final IoBuffer buffer = ((IsoTPMessage) message).getUserData();
            if (buffer.get() != S7_PROTOCOL_MAGIC_NUMBER) {
                logger.warn("Expecting S7 protocol magic number.");
                return;
            }

            MessageType messageType = MessageType.valueOf(buffer.get());
            boolean isResponse = messageType == MessageType.ACK_DATA;
            // Reserved (is always constant 0x0000)
            buffer.getShort();
            short tpduReference = buffer.getShort();
            short headerParametersLength = buffer.getShort();
            short userDataLength = buffer.getShort();
            byte errorClass = 0;
            byte errorCode = 0;
            if(messageType == MessageType.ACK_DATA) {
                errorClass = buffer.get();
                errorCode = buffer.get();
            }
            List<S7Parameter> s7Parameters = new LinkedList<>();
            SetupCommunicationParameter setupCommunicationParameter = null;
            for (int i = 0; i < headerParametersLength; ) {
                S7Parameter parameter = parseParameter(buffer, isResponse);
                s7Parameters.add(parameter);
                if(parameter instanceof SetupCommunicationParameter) {
                    setupCommunicationParameter = (SetupCommunicationParameter) parameter;
                }
                i += getParameterLength(parameter);
            }
            List<S7Payload> s7Payloads = new LinkedList<>();
            for(int i = 0; i < userDataLength; ) {
                DataTransportErrorCode dataTransportErrorCode = DataTransportErrorCode.valueOf(buffer.get());
                DataTransportSize dataTransportSize = DataTransportSize.valueOf(buffer.get());
                short length = (dataTransportSize.isSizeInBits()) ?
                    (short) Math.ceil(buffer.getShort() / 8) : buffer.getShort();
                byte[] data = new byte[length];
                buffer.get(data);
                S7AnyReadVarPayload payload = new S7AnyReadVarPayload(
                    null, dataTransportErrorCode, dataTransportSize, data);
                s7Payloads.add(payload);
                i += getPayloadLength(payload);
            }

            if(messageType == MessageType.ACK_DATA) {
                // If we got a SetupCommunicationParameter as part of the response
                // we are currently in the process of establishing a connection with
                // the PLC, so save some of the information in the session and tell
                // the next layer to negotiate the connection parameters.
                if(setupCommunicationParameter != null) {
                    session.setAttribute("S7_MAX_AMQ_CALLEE", setupCommunicationParameter.getMaxAmqCallee());
                    session.setAttribute("S7_MAX_AMQ_CALLER", setupCommunicationParameter.getMaxAmqCaller());
                    session.setAttribute("S7_PDU_LENGTH", setupCommunicationParameter.getPduLength());
                    nextFilter.sessionOpened(session);
                }
                super.messageReceived(nextFilter, session, new S7ResponseMessage(
                    messageType, tpduReference, s7Parameters, s7Payloads, errorClass, errorCode));
            } else {
                super.messageReceived(nextFilter, session, new S7RequestMessage(
                    messageType, tpduReference, s7Parameters, s7Payloads));
            }
        }
    }

    private S7Parameter parseParameter(IoBuffer buffer, boolean isResponse) {
        ParameterType parameterType = ParameterType.valueOf(buffer.get());
        if (parameterType == null) {
            logger.error("Could not find parameter type");
            return null;
        }
        switch (parameterType) {
            case READ_VAR: {
                ReadVarParameter readVarParameter = new ReadVarParameter();
                byte numItems = buffer.get();
                for(int i = 0; i < numItems; i++) {
                    if (!isResponse) {
                        SpecificationType specificationType = SpecificationType.valueOf(buffer.get());
                        // Length of the rest of this item.
                        byte itemLength = buffer.get();
                        if(itemLength != 0x0a) {
                            logger.warn("Expecting a length of 10 here.");
                            return null;
                        }
                        VariableAddressingMode variableAddressingMode = VariableAddressingMode.valueOf(buffer.get());
                        switch (variableAddressingMode) {
                            case S7ANY: {
                                TransportSize transportSize = TransportSize.valueOf(buffer.get());
                                short length = buffer.getShort();
                                short dbNumber = buffer.getShort();
                                MemoryArea memoryArea = MemoryArea.valueOf(buffer.get());
                                short byteAddress = (short) (buffer.getShort() << 5);
                                byte tmp = buffer.get();
                                // Only the least 3 bits are the bit address, the
                                byte bitAddress = (byte) (tmp & 0x07);
                                // Bits 4-8 belong to the byte address
                                byteAddress = (short) (byteAddress | (tmp >> 3));
                                S7AnyReadVarRequestItem item = new S7AnyReadVarRequestItem(
                                    specificationType, memoryArea, transportSize,
                                    length, dbNumber, byteAddress, bitAddress);
                                readVarParameter.addRequestItem(item);
                            }
                            default: {
                                logger.error("Error parsing item type");
                                return null;
                            }
                        }
                    }
                }
                return readVarParameter;
            }
            case SETUP_COMMUNICATION: {
                // Reserved (is always constant 0x00)
                buffer.get();
                short callingMaxAmq = buffer.getShort();
                short calledMaxAmq = buffer.getShort();
                short pduLength = buffer.getShort();
                return new SetupCommunicationParameter(callingMaxAmq, calledMaxAmq, pduLength);
            }
        }
        return null;
    }

    private short getParametersLength(List<S7Parameter> parameters) {
        short l = 0;
        if (parameters != null) {
            for (S7Parameter parameter : parameters) {
                l += getParameterLength(parameter);
            }
        }
        return l;
    }

    private short getPayloadsLength(List<S7Payload> payloads) {
        short l = 0;
        if (payloads != null) {
            for (S7Payload payload : payloads) {
                l += getPayloadLength(payload);
            }
        }
        return l;
    }

    private short getParameterLength(S7Parameter parameter) {
        if(parameter != null) {
            switch (parameter.getType()) {
                case READ_VAR: {
                    ReadVarParameter readVarParameter = (ReadVarParameter) parameter;
                    short length = 2;
                    for (ReadVarRequestItem readVarRequestItem : readVarParameter.getItems()) {
                        switch (readVarRequestItem.getAddressingMode()) {
                            case S7ANY: {
                                length += 12;
                                break;
                            }
                            default: {
                                logger.error("Not implemented");
                                break;
                            }
                        }
                    }
                    return length;
                }
                case SETUP_COMMUNICATION: {
                    return 8;
                }
            }
        }
        return 0;
    }

    private short getPayloadLength(S7Payload payload) {
        if(payload != null) {
            switch (payload.getType()) {
                case READ_VAR: {
                    S7AnyReadVarPayload readVarPayload = (S7AnyReadVarPayload) payload;
                    return (short) (4 + readVarPayload.getData().length);
                }
                default: {
                    logger.error("Not implemented");
                }
            }
        }
        return 0;
    }

}
