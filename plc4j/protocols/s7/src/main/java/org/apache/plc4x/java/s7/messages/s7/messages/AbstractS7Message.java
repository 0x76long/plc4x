/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package org.apache.plc4x.java.s7.messages.s7.messages;

import org.apache.plc4x.java.exceptions.PlcException;
import org.apache.plc4x.java.exceptions.PlcIoException;
import org.apache.plc4x.java.s7.messages.isotp.messages.AbstractIsoTpMessage;
import org.apache.plc4x.java.s7.messages.isotp.types.TpduCode;
import org.apache.plc4x.java.s7.messages.s7.params.S7Parameter;
import org.apache.plc4x.java.s7.messages.s7.payload.S7Payload;
import org.apache.plc4x.java.s7.messages.s7.types.MessageType;

import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.List;

abstract class AbstractS7Message extends AbstractIsoTpMessage {

    public static final byte S7_PROTOCOL_MAGIC_NUMBER = 0x32;

    private final MessageType messageType;
    private final List<S7Parameter> s7Parameters;
    private final List<S7Payload> s7Payloads;

    protected AbstractS7Message(TpduCode tpduCode, MessageType messageType, List<S7Parameter> s7Parameters, List<S7Payload> s7Payloads) {
        super(tpduCode, Collections.emptyList());
        this.messageType = messageType;
        this.s7Parameters = s7Parameters;
        this.s7Payloads = s7Payloads;
    }

    public MessageType getMessageType() {
        return messageType;
    }

    public List<S7Parameter> getS7Parameters() {
        return s7Parameters;
    }

    public <T> T getS7Parameter(Class<? extends T> parameterType) {
        if(s7Parameters != null) {
            for (S7Parameter s7Parameter : s7Parameters) {
                if(s7Parameter.getClass() == parameterType) {
                    return (T) s7Parameter;
                }
            }
        }
        return null;
    }

    public List<S7Payload> getS7Payloads() {
        return s7Payloads;
    }

    public <T> T getS7Payload(Class<? extends T> payloadType) {
        if(s7Payloads != null) {
            for (S7Payload s7Payload : s7Payloads) {
                if(s7Payload.getClass() == payloadType) {
                    return (T) s7Payload;
                }
            }
        }
        return null;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Serialization

    @Override
    protected short getIsoTpHeaderFixedPartLength() {
        return 1;
    }

    @Override
    protected void serializeIsoTpHeaderFixedPart(DataOutputStream dos) throws PlcException {
        try {
            dos.writeByte((byte) 0x80);  // EOT (Bit 8 = 1) / TPDU (All other bits 0)
            //                          Destination Reference (constantly set to 0)
        } catch (IOException e) {
            throw new PlcIoException("Error serializing message", e);
        }
    }

    @Override
    protected short getIsoTpUserDataLength() {
        return (short) (getS7FixedHeaderLength() + getS7HeaderParametersLength());
    }

    @Override
    protected void serializeIsoTpUserData(DataOutputStream dos) throws PlcException {
        try {
            dos.writeByte(S7_PROTOCOL_MAGIC_NUMBER);
            dos.writeByte(messageType.getCode());
            dos.writeShort((short) 0x0000);                  // Reserved ...
            dos.writeShort((short) 0x0800);                  // TODO: PDU Reference (Request Id, generated by the initiating node)
            dos.writeShort(getS7HeaderParametersLength());   // S7 parameters length
            dos.writeShort(getS7UserDataLength());           // Data field length
            serializeS7Parameters(dos);
            serializeS7UserData(dos);
        } catch (IOException e) {
            throw new PlcIoException("Error serializing message", e);
        }
    }

    private short getS7FixedHeaderLength() {
        return 10;
    }

    private short getS7HeaderParametersLength() {
        short l = 0;
        if(s7Parameters != null) {
            for(S7Parameter s7Parameter : s7Parameters) {
                l += s7Parameter.getLength();
            }
        }
        return l;
    }

    private void serializeS7Parameters(DataOutputStream dos) throws PlcException {
        if(s7Parameters != null) {
            for (S7Parameter s7Parameter : s7Parameters) {
                s7Parameter.serialize(dos);
            }
        }
    }

    private short getS7UserDataLength() {
        short l = 0;
        if(s7Payloads != null) {
            for(S7Payload s7Payload : s7Payloads) {
                l += s7Payload.getLength();
            }
        }
        return l;
    }

    private void serializeS7UserData(DataOutputStream dos) throws PlcException {
        if(s7Payloads != null) {
            for(S7Payload s7Payload : s7Payloads) {
                s7Payload.serialize(dos);
            }
        }
    }

}