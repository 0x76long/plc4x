/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace org.apache.plc4x.interop
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FieldResponse : TBase
  {
    private RESPONSE_CODE _responseCode;
    private bool _boolValue;
    private long _longValue;
    private double _doubleValue;
    private string _stringValue;

    /// <summary>
    /// 
    /// <seealso cref="RESPONSE_CODE"/>
    /// </summary>
    public RESPONSE_CODE ResponseCode
    {
      get
      {
        return _responseCode;
      }
      set
      {
        __isset.responseCode = true;
        this._responseCode = value;
      }
    }

    public bool BoolValue
    {
      get
      {
        return _boolValue;
      }
      set
      {
        __isset.boolValue = true;
        this._boolValue = value;
      }
    }

    public long LongValue
    {
      get
      {
        return _longValue;
      }
      set
      {
        __isset.longValue = true;
        this._longValue = value;
      }
    }

    public double DoubleValue
    {
      get
      {
        return _doubleValue;
      }
      set
      {
        __isset.doubleValue = true;
        this._doubleValue = value;
      }
    }

    public string StringValue
    {
      get
      {
        return _stringValue;
      }
      set
      {
        __isset.stringValue = true;
        this._stringValue = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool responseCode;
      public bool boolValue;
      public bool longValue;
      public bool doubleValue;
      public bool stringValue;
    }

    public FieldResponse() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ResponseCode = (RESPONSE_CODE)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                BoolValue = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                LongValue = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                DoubleValue = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                StringValue = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("FieldResponse");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.responseCode) {
          field.Name = "responseCode";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ResponseCode);
          oprot.WriteFieldEnd();
        }
        if (__isset.boolValue) {
          field.Name = "boolValue";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(BoolValue);
          oprot.WriteFieldEnd();
        }
        if (__isset.longValue) {
          field.Name = "longValue";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LongValue);
          oprot.WriteFieldEnd();
        }
        if (__isset.doubleValue) {
          field.Name = "doubleValue";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(DoubleValue);
          oprot.WriteFieldEnd();
        }
        if (StringValue != null && __isset.stringValue) {
          field.Name = "stringValue";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StringValue);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FieldResponse(");
      bool __first = true;
      if (__isset.responseCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ResponseCode: ");
        __sb.Append(ResponseCode);
      }
      if (__isset.boolValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BoolValue: ");
        __sb.Append(BoolValue);
      }
      if (__isset.longValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LongValue: ");
        __sb.Append(LongValue);
      }
      if (__isset.doubleValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DoubleValue: ");
        __sb.Append(DoubleValue);
      }
      if (StringValue != null && __isset.stringValue) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StringValue: ");
        __sb.Append(StringValue);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
