/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace org.apache.plc4x.interop
{
  public partial class InteropServer {
    public interface ISync {
      ConnectionHandle connect(string connectionString);
      Response execute(ConnectionHandle handle, Request request);
      void close(ConnectionHandle handle);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_connect(AsyncCallback callback, object state, string connectionString);
      ConnectionHandle End_connect(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_execute(AsyncCallback callback, object state, ConnectionHandle handle, Request request);
      Response End_execute(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_close(AsyncCallback callback, object state, ConnectionHandle handle);
      void End_close(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_connect(AsyncCallback callback, object state, string connectionString)
      {
        return send_connect(callback, state, connectionString);
      }

      public ConnectionHandle End_connect(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_connect();
      }

      #endif

      public ConnectionHandle connect(string connectionString)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_connect(null, null, connectionString);
        return End_connect(asyncResult);

        #else
        send_connect(connectionString);
        return recv_connect();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_connect(AsyncCallback callback, object state, string connectionString)
      {
        oprot_.WriteMessageBegin(new TMessage("connect", TMessageType.Call, seqid_));
        connect_args args = new connect_args();
        args.ConnectionString = connectionString;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_connect(string connectionString)
      {
        oprot_.WriteMessageBegin(new TMessage("connect", TMessageType.Call, seqid_));
        connect_args args = new connect_args();
        args.ConnectionString = connectionString;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public ConnectionHandle recv_connect()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        connect_result result = new connect_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.connectionException) {
          throw result.ConnectionException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connect failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_execute(AsyncCallback callback, object state, ConnectionHandle handle, Request request)
      {
        return send_execute(callback, state, handle, request);
      }

      public Response End_execute(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_execute();
      }

      #endif

      public Response execute(ConnectionHandle handle, Request request)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_execute(null, null, handle, request);
        return End_execute(asyncResult);

        #else
        send_execute(handle, request);
        return recv_execute();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_execute(AsyncCallback callback, object state, ConnectionHandle handle, Request request)
      {
        oprot_.WriteMessageBegin(new TMessage("execute", TMessageType.Call, seqid_));
        execute_args args = new execute_args();
        args.Handle = handle;
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_execute(ConnectionHandle handle, Request request)
      {
        oprot_.WriteMessageBegin(new TMessage("execute", TMessageType.Call, seqid_));
        execute_args args = new execute_args();
        args.Handle = handle;
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Response recv_execute()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        execute_result result = new execute_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.executionException) {
          throw result.ExecutionException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "execute failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_close(AsyncCallback callback, object state, ConnectionHandle handle)
      {
        return send_close(callback, state, handle);
      }

      public void End_close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_close();
      }

      #endif

      public void close(ConnectionHandle handle)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_close(null, null, handle);
        End_close(asyncResult);

        #else
        send_close(handle);
        recv_close();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_close(AsyncCallback callback, object state, ConnectionHandle handle)
      {
        oprot_.WriteMessageBegin(new TMessage("close", TMessageType.Call, seqid_));
        close_args args = new close_args();
        args.Handle = handle;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_close(ConnectionHandle handle)
      {
        oprot_.WriteMessageBegin(new TMessage("close", TMessageType.Call, seqid_));
        close_args args = new close_args();
        args.Handle = handle;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_result result = new close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["connect"] = connect_Process;
        processMap_["execute"] = execute_Process;
        processMap_["close"] = close_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void connect_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        connect_args args = new connect_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        connect_result result = new connect_result();
        try
        {
          try
          {
            result.Success = iface_.connect(args.ConnectionString);
          }
          catch (PlcException connectionException)
          {
            result.ConnectionException = connectionException;
          }
          oprot.WriteMessageBegin(new TMessage("connect", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("connect", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void execute_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        execute_args args = new execute_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        execute_result result = new execute_result();
        try
        {
          try
          {
            result.Success = iface_.execute(args.Handle, args.Request);
          }
          catch (PlcException executionException)
          {
            result.ExecutionException = executionException;
          }
          oprot.WriteMessageBegin(new TMessage("execute", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("execute", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_args args = new close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_result result = new close_result();
        try
        {
          iface_.close(args.Handle);
          oprot.WriteMessageBegin(new TMessage("close", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("close", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connect_args : TBase
    {
      private string _connectionString;

      public string ConnectionString
      {
        get
        {
          return _connectionString;
        }
        set
        {
          __isset.connectionString = true;
          this._connectionString = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool connectionString;
      }

      public connect_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  ConnectionString = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("connect_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (ConnectionString != null && __isset.connectionString) {
            field.Name = "connectionString";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ConnectionString);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connect_args(");
        bool __first = true;
        if (ConnectionString != null && __isset.connectionString) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ConnectionString: ");
          __sb.Append(ConnectionString);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class connect_result : TBase
    {
      private ConnectionHandle _success;
      private PlcException _connectionException;

      public ConnectionHandle Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public PlcException ConnectionException
      {
        get
        {
          return _connectionException;
        }
        set
        {
          __isset.connectionException = true;
          this._connectionException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool connectionException;
      }

      public connect_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new ConnectionHandle();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  ConnectionException = new PlcException();
                  ConnectionException.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("connect_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.connectionException) {
            if (ConnectionException != null) {
              field.Name = "ConnectionException";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              ConnectionException.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("connect_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (ConnectionException != null && __isset.connectionException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ConnectionException: ");
          __sb.Append(ConnectionException== null ? "<null>" : ConnectionException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class execute_args : TBase
    {
      private ConnectionHandle _handle;
      private Request _request;

      public ConnectionHandle Handle
      {
        get
        {
          return _handle;
        }
        set
        {
          __isset.handle = true;
          this._handle = value;
        }
      }

      public Request Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool handle;
        public bool request;
      }

      public execute_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Handle = new ConnectionHandle();
                  Handle.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Request = new Request();
                  Request.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("execute_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Handle != null && __isset.handle) {
            field.Name = "handle";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Handle.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Request != null && __isset.request) {
            field.Name = "request";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Request.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("execute_args(");
        bool __first = true;
        if (Handle != null && __isset.handle) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Handle: ");
          __sb.Append(Handle== null ? "<null>" : Handle.ToString());
        }
        if (Request != null && __isset.request) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Request: ");
          __sb.Append(Request== null ? "<null>" : Request.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class execute_result : TBase
    {
      private Response _success;
      private PlcException _executionException;

      public Response Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public PlcException ExecutionException
      {
        get
        {
          return _executionException;
        }
        set
        {
          __isset.executionException = true;
          this._executionException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool executionException;
      }

      public execute_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Response();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  ExecutionException = new PlcException();
                  ExecutionException.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("execute_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.executionException) {
            if (ExecutionException != null) {
              field.Name = "ExecutionException";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              ExecutionException.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("execute_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (ExecutionException != null && __isset.executionException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ExecutionException: ");
          __sb.Append(ExecutionException== null ? "<null>" : ExecutionException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_args : TBase
    {
      private ConnectionHandle _handle;

      public ConnectionHandle Handle
      {
        get
        {
          return _handle;
        }
        set
        {
          __isset.handle = true;
          this._handle = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool handle;
      }

      public close_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Handle = new ConnectionHandle();
                  Handle.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Handle != null && __isset.handle) {
            field.Name = "handle";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Handle.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_args(");
        bool __first = true;
        if (Handle != null && __isset.handle) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Handle: ");
          __sb.Append(Handle== null ? "<null>" : Handle.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_result : TBase
    {

      public close_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("close_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
